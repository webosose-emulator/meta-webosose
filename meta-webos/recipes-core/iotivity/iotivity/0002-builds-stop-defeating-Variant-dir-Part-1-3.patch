From 926de316fea81711f2db3fa9dcfa38dec845df6b Mon Sep 17 00:00:00 2001
From: "sungmok.shin" <sungmok.shin@lge.com>
Date: Fri, 12 Oct 2018 14:23:17 +0900
Subject: [PATCH] builds: stop defeating Variant dir Part 1/3

In various places in the build scripts, steps are taken which defeat the
intent of using a variant dir: a distinct tree where building takes place.
Mostly this works as expected, but in places where the scripts call
Python facilities directly to figure paths out, scons does not have
the ability to "know" the paths and do the internal substitutions if
VariantDir is in effect.

There is a bug report (IOT-645) which claims this "build in the source
dir" behavior inhibits multiple builds of different targets at the same
time on one machine/instance, although that bug is focused on extlibs
which is its own story, builds there are only initiated by scons passing
control to some other builder (make, etc.) so harder to solve.

Part one of this patch series is fixing resource/csdk/connectivity.

The main type of thing which causes the issue is:

    src_dir = os.path.abspath(os.curdir)

This absolute path (which scons has no ability to adjust to use the
variant dir) is typically joined with source file names in subdirectories
when the builder will not be invoked in that directory. Replacing that
model, source files are now added as File objects (instead of simple
path strings), which leaves scons in full knowlege of the file and how
to find it. It's possible a plain filename string would be good enough;
scons is aware of the location it's in when running a given script.

A challenge was in the resource/csdk/connectivity/src/*adapter build
scripts: these invoke a target-specific subsidiary script to add source
files particular to the target (tizen, android, etc.) - but not all
possible build tergets have a script for each adapter.  So the scripts
checked for the script using os.path.exists() using an absolute path as
noted above, as it must since the Python module does not know scons path
tools, but then when calling it using the same path, the context is wrong
and the added sources and thus their derived object dependencies were
relative to the source tree, not the the variant dir. Again using a File
object, it is possible to extract both a regular (variant-adjustable)
path and a srcdir-relative path, the latter used for the check by
os.path.exists.

With this change, of the original 81 non-extlibs and non-libcoap builds
not happening in variant dir, there are only four remaining (though note
counts are build-dependent and this only refers to Linux x86_64 with the
options I used). Those four will be the subject of part 2/3.  (Part 3/3
is already merged to master and fixed the ones coming from bridging/):

Preparing target resource/c_common/oic_malloc/src/oic_malloc.o...
Preparing target resource/csdk/logger/src/logger.o...
Preparing target resource/c_common/oic_string/src/oic_string.o...
Preparing target resource/src/OCRepresentation.o...

While working on this, a few missed list-assignment reformattings were
snuck in, these should clearly be seen to be zero-impact.

Additionally, in a few places when a comparison is done against a list
which will be used as if it were immutable, like:

    if foo in ['linux', 'tizen']:

it was actually changed to be immutable, i.e. [] changed to tuple ().

Some old debugging prints announcing when a script is being scanned were
also dropped.

This change is independent of the others in the series.

Bug: https://jira.iotivity.org/browse/IOT-645
Change-Id: I54ba8c6613bcfefb6dba64687e9f1a0e72327a41
Signed-off-by: Mats Wichmann <mats@linux.com>

Upstream-Status: Accepted [https://gerrit.iotivity.org/gerrit/#/c/21889]
---
 .../csdk/connectivity/src/ip_adapter/SConscript    | 28 ++++++++++++----------
 1 file changed, 15 insertions(+), 13 deletions(-)

diff --git a/resource/csdk/connectivity/src/ip_adapter/SConscript b/resource/csdk/connectivity/src/ip_adapter/SConscript
index e00b6fa..84dc6f7 100644
--- a/resource/csdk/connectivity/src/ip_adapter/SConscript
+++ b/resource/csdk/connectivity/src/ip_adapter/SConscript
@@ -5,27 +5,29 @@ import os
 
 Import('connectivity_env')
 
-print("Reading IP adapter script")
-
 target_os = connectivity_env.get('TARGET_OS')
-src_dir = os.path.abspath(os.curdir)
 
-# Source files to build common for all platforms
-common_files = [os.path.join(src_dir, 'caipadapter.c')]
+# Source files common to all platforms
+common_files = [File('caipadapter.c')]
+
+# Target-specific sources
 if target_os != 'arduino':
-    common_files.append(os.path.join(src_dir, 'caipserver.c'))
+    common_files.append(File('caipserver.c'))
     # Source files to build for Linux-like platforms
     if target_os in ['linux', 'darwin', 'ios']:
-        common_files.append(os.path.join(src_dir, 'linux/caipnwmonitor.c'))
+        common_files.append(File('linux/caipnwmonitor.c'))
     elif target_os in ['msys_nt', 'windows']:
-        common_files.append(os.path.join(src_dir, 'windows/caipnwmonitor.c'))
+        common_files.append(File('windows/caipnwmonitor.c'))
 
 connectivity_env.AppendUnique(CA_SRC=common_files)
 
 # Check for the existence of the platform-specific SConscript file
-# relative to the top-level source directory, not the build (variant)
-# directory, before calling that SConscript file to prevent a missing
-# file warning platforms that don't provide one.
-target_sconscript = target_os + '/SConscript'
-if os.path.exists(target_sconscript):
+# before calling it - some target platforms do not provide one.
+# The check has to happen in the source tree because os.path.*
+# methods cannot know about SCons's rewriting rules, but the actual
+# call to the script should happen normally or the targets will
+# not be adjusted properly - scons keeps track of the directory
+# an sconscript is invoked in and actions are relative to that path.
+target_sconscript = File(os.path.join(target_os, 'SConscript'))
+if os.path.exists(target_sconscript.srcnode().abspath):
     SConscript(target_sconscript, exports='connectivity_env')
-- 
1.9.1

