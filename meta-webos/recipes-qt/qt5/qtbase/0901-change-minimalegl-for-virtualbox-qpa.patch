From bc730e655d74951303d3024980ae027b279413e7 Mon Sep 17 00:00:00 2001
From: Heegoo Han <heegoo.han@lge.com>
Date: Thu, 21 Mar 2019 19:24:35 +0900
Subject: [PATCH] change minimalegl for virtualbox qpa

---
 .../platforms/minimalegl/InputControl.h       |  37 +
 .../platforms/minimalegl/NyxInputControl.cpp  |  72 ++
 .../platforms/minimalegl/NyxInputControl.h    |  39 ++
 .../platforms/minimalegl/input_keycode.h      |  51 ++
 .../platforms/minimalegl/minimalegl.pro       |  19 +-
 .../qemulatorkeyboard_defaultmap_p.h          | 640 ++++++++++++++++++
 .../minimalegl/qemulatorkeyboardhandler.cpp   | 156 +++++
 .../minimalegl/qemulatorkeyboardhandler.h     | 120 ++++
 .../minimalegl/qemulatorkeyboardmanager.cpp   | 165 +++++
 .../minimalegl/qemulatorkeyboardmanager.h     |  61 ++
 .../minimalegl/qinputdevicescanner.cpp        | 139 ++++
 .../minimalegl/qinputdevicescanner.h          |  51 ++
 .../platforms/minimalegl/qlinuxmouse.cpp      | 277 ++++++++
 .../platforms/minimalegl/qlinuxmouse.h        |  54 ++
 .../minimalegl/qminimaleglintegration.cpp     |  58 ++
 .../minimalegl/qminimaleglintegration.h       |  17 +-
 .../minimalegl/qminimaleglscreen.cpp          |   1 +
 .../platforms/minimalegl/qminimaleglscreen.h  |   4 +
 18 files changed, 1958 insertions(+), 3 deletions(-)
 create mode 100644 src/plugins/platforms/minimalegl/InputControl.h
 create mode 100644 src/plugins/platforms/minimalegl/NyxInputControl.cpp
 create mode 100644 src/plugins/platforms/minimalegl/NyxInputControl.h
 create mode 100644 src/plugins/platforms/minimalegl/input_keycode.h
 create mode 100644 src/plugins/platforms/minimalegl/qemulatorkeyboard_defaultmap_p.h
 create mode 100644 src/plugins/platforms/minimalegl/qemulatorkeyboardhandler.cpp
 create mode 100644 src/plugins/platforms/minimalegl/qemulatorkeyboardhandler.h
 create mode 100644 src/plugins/platforms/minimalegl/qemulatorkeyboardmanager.cpp
 create mode 100644 src/plugins/platforms/minimalegl/qemulatorkeyboardmanager.h
 create mode 100644 src/plugins/platforms/minimalegl/qinputdevicescanner.cpp
 create mode 100644 src/plugins/platforms/minimalegl/qinputdevicescanner.h
 create mode 100644 src/plugins/platforms/minimalegl/qlinuxmouse.cpp
 create mode 100644 src/plugins/platforms/minimalegl/qlinuxmouse.h

diff --git a/src/plugins/platforms/minimalegl/InputControl.h b/src/plugins/platforms/minimalegl/InputControl.h
new file mode 100644
index 0000000000..e4d1c2ca6a
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/InputControl.h
@@ -0,0 +1,37 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef _INPUTCONTROL_H_
+#define _INPUTCONTROL_H_
+
+#include <nyx/nyx_client.h>
+
+class InputControl
+{
+public:
+
+    virtual ~InputControl() {};
+
+    virtual bool on() = 0;
+    virtual bool off() = 0;
+    virtual bool setRate(int rate) =0;
+
+    virtual nyx_device_handle_t getHandle() = 0;
+};
+
+#endif /* _INPUTCONTROL_H_ */
diff --git a/src/plugins/platforms/minimalegl/NyxInputControl.cpp b/src/plugins/platforms/minimalegl/NyxInputControl.cpp
new file mode 100644
index 0000000000..56b47943e7
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/NyxInputControl.cpp
@@ -0,0 +1,72 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "NyxInputControl.h"
+#include <Qt>
+#include <QDebug>
+
+NyxInputControl::NyxInputControl(nyx_device_type_t type, nyx_device_id_t id) : m_handle(0)
+{
+    nyx_error_t error = nyx_device_open(type, id, &m_handle);
+    if ((error != NYX_ERROR_NONE) || (m_handle == NULL))
+    {
+        qFatal("Unable to obtain m_handle");
+    }
+}
+
+NyxInputControl::~NyxInputControl()
+{
+    if (m_handle)
+    {
+        nyx_error_t error = nyx_device_close(m_handle);
+        qFatal("Unable to release m_handle, error: %d", error);
+    }
+}
+
+bool NyxInputControl::on()
+{
+    if (m_handle)
+    {
+        nyx_error_t error = NYX_ERROR_NONE;
+        error = nyx_device_set_operating_mode(m_handle, NYX_OPERATING_MODE_ON);
+        return (error == NYX_ERROR_NONE || error == NYX_ERROR_NOT_IMPLEMENTED);
+    }
+    return true;
+}
+
+bool NyxInputControl::off()
+{
+    if (m_handle)
+    {
+        nyx_error_t error = NYX_ERROR_NONE;
+        error = nyx_device_set_operating_mode(m_handle, NYX_OPERATING_MODE_OFF);
+        return (error == NYX_ERROR_NONE || error == NYX_ERROR_NOT_IMPLEMENTED);
+    }
+    return true;
+}
+
+bool NyxInputControl::setRate(int rate)
+{
+    if (m_handle)
+    {
+        nyx_error_t error = NYX_ERROR_NONE;
+        error = nyx_device_set_report_rate(m_handle, (nyx_report_rate_t)rate);
+        return (error == NYX_ERROR_NONE || error == NYX_ERROR_NOT_IMPLEMENTED);
+    }
+    return true;
+}
diff --git a/src/plugins/platforms/minimalegl/NyxInputControl.h b/src/plugins/platforms/minimalegl/NyxInputControl.h
new file mode 100644
index 0000000000..54195ddef9
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/NyxInputControl.h
@@ -0,0 +1,39 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef _NYXINPUTCONTROL_H_
+#define _NYXINPUTCONTROL_H_
+
+#include "InputControl.h"
+
+class NyxInputControl: public InputControl {
+public:
+    NyxInputControl(nyx_device_type_t type, nyx_device_id_t id);
+    virtual ~NyxInputControl();
+
+    virtual bool on();
+    virtual bool off();
+    virtual bool setRate(int rate);
+
+    virtual nyx_device_handle_t getHandle() { return m_handle; }
+
+private:
+    nyx_device_handle_t m_handle;
+};
+
+#endif /* _NYXINPUTCONTROL_H_ */
diff --git a/src/plugins/platforms/minimalegl/input_keycode.h b/src/plugins/platforms/minimalegl/input_keycode.h
new file mode 100644
index 0000000000..3ecef96961
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/input_keycode.h
@@ -0,0 +1,51 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef _INPUT_KEYCODE_H_
+#define _INPUT_KEYCODE_H_
+
+#include <linux/input.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define INPUT_KEY_0					KEY_0
+#define INPUT_KEY_1					KEY_1
+#define INPUT_KEY_2					KEY_2
+#define INPUT_KEY_3					KEY_3
+#define INPUT_KEY_4					KEY_4
+#define INPUT_KEY_5					KEY_5
+#define INPUT_KEY_6					KEY_6
+#define INPUT_KEY_7					KEY_7
+#define INPUT_KEY_8					KEY_8
+#define INPUT_KEY_9					KEY_9
+
+
+#define INPUT_KEY_UP_ARROW 				KEY_UP
+#define INPUT_KEY_DOWN_ARROW				KEY_DOWN
+#define INPUT_KEY_LEFT_ARROW				KEY_LEFT
+#define INPUT_KEY_RIGHT_ARROW				KEY_RIGHT
+#define INPUT_KEY_ENTER					KEY_ENTER
+
+#ifdef __cplusplus
+}
+#endif
+#endif
+
+
diff --git a/src/plugins/platforms/minimalegl/minimalegl.pro b/src/plugins/platforms/minimalegl/minimalegl.pro
index ac67249591..e9271285ee 100644
--- a/src/plugins/platforms/minimalegl/minimalegl.pro
+++ b/src/plugins/platforms/minimalegl/minimalegl.pro
@@ -13,15 +13,30 @@ SOURCES =   main.cpp \
             qminimaleglintegration.cpp \
             qminimaleglwindow.cpp \
             qminimaleglbackingstore.cpp \
-            qminimaleglscreen.cpp
+            qminimaleglscreen.cpp \
+            qlinuxmouse.cpp \
+            qinputdevicescanner.cpp \
+            NyxInputControl.cpp \
+            qemulatorkeyboardhandler.cpp \
+            qemulatorkeyboardmanager.cpp
 
 HEADERS =   qminimaleglintegration.h \
             qminimaleglwindow.h \
             qminimaleglbackingstore.h \
-            qminimaleglscreen.h
+            qminimaleglscreen.h \
+            qlinuxmouse.h \
+            qinputdevicescanner.h \
+            InputControl.h \
+            NyxInputControl.h \
+            qemulatorkeyboard_defaultmap_p.h \
+            qemulatorkeyboardhandler.h \
+            qemulatorkeyboardmanager.h \
+            input_keycode.h
 
 CONFIG += egl qpa/genericunixfontdatabase
 
+LIBS += -lnyx
+
 OTHER_FILES += \
     minimalegl.json
 
diff --git a/src/plugins/platforms/minimalegl/qemulatorkeyboard_defaultmap_p.h b/src/plugins/platforms/minimalegl/qemulatorkeyboard_defaultmap_p.h
new file mode 100644
index 0000000000..ebe600ef1b
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/qemulatorkeyboard_defaultmap_p.h
@@ -0,0 +1,640 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QEMULATORKEYBOARDHANDLER_DEFAULTMAP_P_H
+#define QEMULATORKEYBOARDHANDLER_DEFAULTMAP_P_H
+
+#include <input_keycode.h>
+
+const QEmulatorKeyboardMap::Mapping QEmulatorKeyboardHandler::s_default_keymap[] = {
+
+    { INPUT_KEY_LEFT_ARROW,    Qt::Key_Left,               0xffff, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_RIGHT_ARROW,   Qt::Key_Right,              0xffff, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_UP_ARROW,      Qt::Key_Up,                 0xffff, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_DOWN_ARROW,    Qt::Key_Down,               0xffff, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_ENTER,         Qt::Key_Return,             0x000d, 0x00, 0x00, 0x0000 },
+
+    { INPUT_KEY_0,             Qt::Key_0,                  0x0030, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_1,             Qt::Key_1,                  0x0031, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_2,             Qt::Key_2,                  0x0032, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_3,             Qt::Key_3,                  0x0033, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_4,             Qt::Key_4,                  0x0034, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_5,             Qt::Key_5,                  0x0035, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_6,             Qt::Key_6,                  0x0036, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_7,             Qt::Key_7,                  0x0037, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_8,             Qt::Key_8,                  0x0038, 0x00, 0x00, 0x0000 },
+    { INPUT_KEY_9,             Qt::Key_9,                  0x0039, 0x00, 0x00, 0x0000 },
+	
+
+    // Default keymaps for keyboards (refered from QEvdevKeyboard)
+    // NOTE: keymaps duplicated by above are removed
+    // CAUTION: values were re-ordered.
+
+    {   1, 0x01000000, 0xffff, 0x00, 0x00, 0x0000 },
+    {   2, 0x00000021, 0x0021, 0x00, 0x01, 0x0000 },
+    {   3, 0x00000040, 0x0040, 0x00, 0x01, 0x0000 },
+    {   3, 0x00000040, 0x0040, 0x00, 0x02, 0x0000 },
+    {   4, 0x00000023, 0x0023, 0x00, 0x01, 0x0000 },
+    {   4, 0x01000000, 0xffff, 0x00, 0x04, 0x0000 },
+    {   5, 0x00000024, 0x0024, 0x00, 0x01, 0x0000 },
+    {   5, 0x00000024, 0x0024, 0x00, 0x02, 0x0000 },
+    {   5, 0x0400005c, 0x005c, 0x00, 0x04, 0x0000 },
+    {   6, 0x00000025, 0x0025, 0x00, 0x01, 0x0000 },
+    {   6, 0x0400005d, 0x005d, 0x00, 0x04, 0x0000 },
+    {   7, 0x0000005e, 0x005e, 0x00, 0x01, 0x0000 },
+    {   7, 0x01001252, 0x005e, 0x01, 0x02, 0x0000 },
+    {   7, 0x0400005e, 0x005e, 0x00, 0x04, 0x0000 },
+    {   8, 0x00000026, 0x0026, 0x00, 0x01, 0x0000 },
+    {   8, 0x0000007b, 0x007b, 0x00, 0x02, 0x0000 },
+    {   8, 0x0400005f, 0x005f, 0x00, 0x04, 0x0000 },
+    {   9, 0x0000002a, 0x002a, 0x00, 0x01, 0x0000 },
+    {   9, 0x0000005b, 0x005b, 0x00, 0x02, 0x0000 },
+    {   9, 0x01000003, 0xffff, 0x00, 0x04, 0x0000 },
+    {  10, 0x00000028, 0x0028, 0x00, 0x01, 0x0000 },
+    {  10, 0x0000005d, 0x005d, 0x00, 0x02, 0x0000 },
+    {  11, 0x00000029, 0x0029, 0x00, 0x01, 0x0000 },
+    {  11, 0x0000007d, 0x007d, 0x00, 0x02, 0x0000 },
+    {  12, 0x0000002d, 0x002d, 0x00, 0x00, 0x0000 },
+    {  12, 0x0000005f, 0x005f, 0x00, 0x01, 0x0000 },
+    {  12, 0x0000005c, 0x005c, 0x00, 0x02, 0x0000 },
+    {  12, 0x0400005f, 0x005f, 0x00, 0x04, 0x0000 },
+    {  12, 0x0400005f, 0x005f, 0x00, 0x05, 0x0000 },
+    {  13, 0x0000003d, 0x003d, 0x00, 0x00, 0x0000 },
+    {  13, 0x0000002b, 0x002b, 0x00, 0x01, 0x0000 },
+    {  14, 0x01000003, 0xffff, 0x00, 0x00, 0x0000 },
+    {  14, 0x01000000, 0xffff, 0x08, 0x0c, 0x0300 },
+    {  15, 0x01000001, 0xffff, 0x00, 0x00, 0x0000 },
+    {  16, 0x00000051, 0x0071, 0x02, 0x00, 0x0000 },
+    {  16, 0x00000051, 0x0051, 0x02, 0x01, 0x0000 },
+    {  16, 0x00000051, 0x0071, 0x02, 0x02, 0x0000 },
+    {  16, 0x00000051, 0x0051, 0x02, 0x03, 0x0000 },
+    {  16, 0x04000051, 0x0071, 0x02, 0x04, 0x0000 },
+    {  16, 0x04000051, 0x0071, 0x02, 0x05, 0x0000 },
+    {  16, 0x04000051, 0x0071, 0x02, 0x06, 0x0000 },
+    {  16, 0x04000051, 0x0071, 0x02, 0x07, 0x0000 },
+    {  16, 0x08000051, 0x0071, 0x02, 0x08, 0x0000 },
+    {  16, 0x08000051, 0x0071, 0x02, 0x09, 0x0000 },
+    {  16, 0x08000051, 0x0071, 0x02, 0x0a, 0x0000 },
+    {  16, 0x08000051, 0x0071, 0x02, 0x0b, 0x0000 },
+    {  16, 0x0c000051, 0x0071, 0x02, 0x0c, 0x0000 },
+    {  16, 0x0c000051, 0x0071, 0x02, 0x0d, 0x0000 },
+    {  16, 0x0c000051, 0x0071, 0x02, 0x0e, 0x0000 },
+    {  16, 0x0c000051, 0x0071, 0x02, 0x0f, 0x0000 },
+    {  17, 0x00000057, 0x0077, 0x02, 0x00, 0x0000 },
+    {  17, 0x00000057, 0x0057, 0x02, 0x01, 0x0000 },
+    {  17, 0x00000057, 0x0077, 0x02, 0x02, 0x0000 },
+    {  17, 0x00000057, 0x0057, 0x02, 0x03, 0x0000 },
+    {  17, 0x04000057, 0x0077, 0x02, 0x04, 0x0000 },
+    {  17, 0x04000057, 0x0077, 0x02, 0x05, 0x0000 },
+    {  17, 0x04000057, 0x0077, 0x02, 0x06, 0x0000 },
+    {  17, 0x04000057, 0x0077, 0x02, 0x07, 0x0000 },
+    {  17, 0x08000057, 0x0077, 0x02, 0x08, 0x0000 },
+    {  17, 0x08000057, 0x0077, 0x02, 0x09, 0x0000 },
+    {  17, 0x08000057, 0x0077, 0x02, 0x0a, 0x0000 },
+    {  17, 0x08000057, 0x0077, 0x02, 0x0b, 0x0000 },
+    {  17, 0x0c000057, 0x0077, 0x02, 0x0c, 0x0000 },
+    {  17, 0x0c000057, 0x0077, 0x02, 0x0d, 0x0000 },
+    {  17, 0x0c000057, 0x0077, 0x02, 0x0e, 0x0000 },
+    {  17, 0x0c000057, 0x0077, 0x02, 0x0f, 0x0000 },
+    {  18, 0x00000045, 0x0065, 0x02, 0x00, 0x0000 },
+    {  18, 0x00000045, 0x0045, 0x02, 0x01, 0x0000 },
+    {  18, 0x00000045, 0x0065, 0x02, 0x02, 0x0000 },
+    {  18, 0x00000045, 0x0045, 0x02, 0x03, 0x0000 },
+    {  18, 0x04000045, 0x0065, 0x02, 0x04, 0x0000 },
+    {  18, 0x04000045, 0x0065, 0x02, 0x05, 0x0000 },
+    {  18, 0x04000045, 0x0065, 0x02, 0x06, 0x0000 },
+    {  18, 0x04000045, 0x0065, 0x02, 0x07, 0x0000 },
+    {  18, 0x08000045, 0x0065, 0x02, 0x08, 0x0000 },
+    {  18, 0x08000045, 0x0065, 0x02, 0x09, 0x0000 },
+    {  18, 0x08000045, 0x0065, 0x02, 0x0a, 0x0000 },
+    {  18, 0x08000045, 0x0065, 0x02, 0x0b, 0x0000 },
+    {  18, 0x0c000045, 0x0065, 0x02, 0x0c, 0x0000 },
+    {  18, 0x0c000045, 0x0065, 0x02, 0x0d, 0x0000 },
+    {  18, 0x0c000045, 0x0065, 0x02, 0x0e, 0x0000 },
+    {  18, 0x0c000045, 0x0065, 0x02, 0x0f, 0x0000 },
+    {  19, 0x00000052, 0x0072, 0x02, 0x00, 0x0000 },
+    {  19, 0x00000052, 0x0052, 0x02, 0x01, 0x0000 },
+    {  19, 0x00000052, 0x0072, 0x02, 0x02, 0x0000 },
+    {  19, 0x00000052, 0x0052, 0x02, 0x03, 0x0000 },
+    {  19, 0x04000052, 0x0072, 0x02, 0x04, 0x0000 },
+    {  19, 0x04000052, 0x0072, 0x02, 0x05, 0x0000 },
+    {  19, 0x04000052, 0x0072, 0x02, 0x06, 0x0000 },
+    {  19, 0x04000052, 0x0072, 0x02, 0x07, 0x0000 },
+    {  19, 0x08000052, 0x0072, 0x02, 0x08, 0x0000 },
+    {  19, 0x08000052, 0x0072, 0x02, 0x09, 0x0000 },
+    {  19, 0x08000052, 0x0072, 0x02, 0x0a, 0x0000 },
+    {  19, 0x08000052, 0x0072, 0x02, 0x0b, 0x0000 },
+    {  19, 0x0c000052, 0x0072, 0x02, 0x0c, 0x0000 },
+    {  19, 0x0c000052, 0x0072, 0x02, 0x0d, 0x0000 },
+    {  19, 0x0c000052, 0x0072, 0x02, 0x0e, 0x0000 },
+    {  19, 0x0c000052, 0x0072, 0x02, 0x0f, 0x0000 },
+    {  20, 0x00000054, 0x0074, 0x02, 0x00, 0x0000 },
+    {  20, 0x00000054, 0x0054, 0x02, 0x01, 0x0000 },
+    {  20, 0x00000054, 0x0074, 0x02, 0x02, 0x0000 },
+    {  20, 0x00000054, 0x0054, 0x02, 0x03, 0x0000 },
+    {  20, 0x04000054, 0x0074, 0x02, 0x04, 0x0000 },
+    {  20, 0x04000054, 0x0074, 0x02, 0x05, 0x0000 },
+    {  20, 0x04000054, 0x0074, 0x02, 0x06, 0x0000 },
+    {  20, 0x04000054, 0x0074, 0x02, 0x07, 0x0000 },
+    {  20, 0x08000054, 0x0074, 0x02, 0x08, 0x0000 },
+    {  20, 0x08000054, 0x0074, 0x02, 0x09, 0x0000 },
+    {  20, 0x08000054, 0x0074, 0x02, 0x0a, 0x0000 },
+    {  20, 0x08000054, 0x0074, 0x02, 0x0b, 0x0000 },
+    {  20, 0x0c000054, 0x0074, 0x02, 0x0c, 0x0000 },
+    {  20, 0x0c000054, 0x0074, 0x02, 0x0d, 0x0000 },
+    {  20, 0x0c000054, 0x0074, 0x02, 0x0e, 0x0000 },
+    {  20, 0x0c000054, 0x0074, 0x02, 0x0f, 0x0000 },
+    {  21, 0x00000059, 0x0079, 0x02, 0x00, 0x0000 },
+    {  21, 0x00000059, 0x0059, 0x02, 0x01, 0x0000 },
+    {  21, 0x00000059, 0x0079, 0x02, 0x02, 0x0000 },
+    {  21, 0x00000059, 0x0059, 0x02, 0x03, 0x0000 },
+    {  21, 0x04000059, 0x0079, 0x02, 0x04, 0x0000 },
+    {  21, 0x04000059, 0x0079, 0x02, 0x05, 0x0000 },
+    {  21, 0x04000059, 0x0079, 0x02, 0x06, 0x0000 },
+    {  21, 0x04000059, 0x0079, 0x02, 0x07, 0x0000 },
+    {  21, 0x08000059, 0x0079, 0x02, 0x08, 0x0000 },
+    {  21, 0x08000059, 0x0079, 0x02, 0x09, 0x0000 },
+    {  21, 0x08000059, 0x0079, 0x02, 0x0a, 0x0000 },
+    {  21, 0x08000059, 0x0079, 0x02, 0x0b, 0x0000 },
+    {  21, 0x0c000059, 0x0079, 0x02, 0x0c, 0x0000 },
+    {  21, 0x0c000059, 0x0079, 0x02, 0x0d, 0x0000 },
+    {  21, 0x0c000059, 0x0079, 0x02, 0x0e, 0x0000 },
+    {  21, 0x0c000059, 0x0079, 0x02, 0x0f, 0x0000 },
+    {  22, 0x00000055, 0x0075, 0x02, 0x00, 0x0000 },
+    {  22, 0x00000055, 0x0055, 0x02, 0x01, 0x0000 },
+    {  22, 0x00000055, 0x0075, 0x02, 0x02, 0x0000 },
+    {  22, 0x00000055, 0x0055, 0x02, 0x03, 0x0000 },
+    {  22, 0x04000055, 0x0075, 0x02, 0x04, 0x0000 },
+    {  22, 0x04000055, 0x0075, 0x02, 0x05, 0x0000 },
+    {  22, 0x04000055, 0x0075, 0x02, 0x06, 0x0000 },
+    {  22, 0x04000055, 0x0075, 0x02, 0x07, 0x0000 },
+    {  22, 0x08000055, 0x0075, 0x02, 0x08, 0x0000 },
+    {  22, 0x08000055, 0x0075, 0x02, 0x09, 0x0000 },
+    {  22, 0x08000055, 0x0075, 0x02, 0x0a, 0x0000 },
+    {  22, 0x08000055, 0x0075, 0x02, 0x0b, 0x0000 },
+    {  22, 0x0c000055, 0x0075, 0x02, 0x0c, 0x0000 },
+    {  22, 0x0c000055, 0x0075, 0x02, 0x0d, 0x0000 },
+    {  22, 0x0c000055, 0x0075, 0x02, 0x0e, 0x0000 },
+    {  22, 0x0c000055, 0x0075, 0x02, 0x0f, 0x0000 },
+    {  23, 0x00000049, 0x0069, 0x02, 0x00, 0x0000 },
+    {  23, 0x00000049, 0x0049, 0x02, 0x01, 0x0000 },
+    {  23, 0x00000049, 0x0069, 0x02, 0x02, 0x0000 },
+    {  23, 0x00000049, 0x0049, 0x02, 0x03, 0x0000 },
+    {  23, 0x04000049, 0x0069, 0x02, 0x04, 0x0000 },
+    {  23, 0x04000049, 0x0069, 0x02, 0x05, 0x0000 },
+    {  23, 0x04000049, 0x0069, 0x02, 0x06, 0x0000 },
+    {  23, 0x04000049, 0x0069, 0x02, 0x07, 0x0000 },
+    {  23, 0x08000049, 0x0069, 0x02, 0x08, 0x0000 },
+    {  23, 0x08000049, 0x0069, 0x02, 0x09, 0x0000 },
+    {  23, 0x08000049, 0x0069, 0x02, 0x0a, 0x0000 },
+    {  23, 0x08000049, 0x0069, 0x02, 0x0b, 0x0000 },
+    {  23, 0x0c000049, 0x0069, 0x02, 0x0c, 0x0000 },
+    {  23, 0x0c000049, 0x0069, 0x02, 0x0d, 0x0000 },
+    {  23, 0x0c000049, 0x0069, 0x02, 0x0e, 0x0000 },
+    {  23, 0x0c000049, 0x0069, 0x02, 0x0f, 0x0000 },
+    {  24, 0x0000004f, 0x006f, 0x02, 0x00, 0x0000 },
+    {  24, 0x0000004f, 0x004f, 0x02, 0x01, 0x0000 },
+    {  24, 0x0000004f, 0x006f, 0x02, 0x02, 0x0000 },
+    {  24, 0x0000004f, 0x004f, 0x02, 0x03, 0x0000 },
+    {  24, 0x0400004f, 0x006f, 0x02, 0x04, 0x0000 },
+    {  24, 0x0400004f, 0x006f, 0x02, 0x05, 0x0000 },
+    {  24, 0x0400004f, 0x006f, 0x02, 0x06, 0x0000 },
+    {  24, 0x0400004f, 0x006f, 0x02, 0x07, 0x0000 },
+    {  24, 0x0800004f, 0x006f, 0x02, 0x08, 0x0000 },
+    {  24, 0x0800004f, 0x006f, 0x02, 0x09, 0x0000 },
+    {  24, 0x0800004f, 0x006f, 0x02, 0x0a, 0x0000 },
+    {  24, 0x0800004f, 0x006f, 0x02, 0x0b, 0x0000 },
+    {  24, 0x0c00004f, 0x006f, 0x02, 0x0c, 0x0000 },
+    {  24, 0x0c00004f, 0x006f, 0x02, 0x0d, 0x0000 },
+    {  24, 0x0c00004f, 0x006f, 0x02, 0x0e, 0x0000 },
+    {  24, 0x0c00004f, 0x006f, 0x02, 0x0f, 0x0000 },
+    {  25, 0x00000050, 0x0070, 0x02, 0x00, 0x0000 },
+    {  25, 0x00000050, 0x0050, 0x02, 0x01, 0x0000 },
+    {  25, 0x00000050, 0x0070, 0x02, 0x02, 0x0000 },
+    {  25, 0x00000050, 0x0050, 0x02, 0x03, 0x0000 },
+    {  25, 0x04000050, 0x0070, 0x02, 0x04, 0x0000 },
+    {  25, 0x04000050, 0x0070, 0x02, 0x05, 0x0000 },
+    {  25, 0x04000050, 0x0070, 0x02, 0x06, 0x0000 },
+    {  25, 0x04000050, 0x0070, 0x02, 0x07, 0x0000 },
+    {  25, 0x08000050, 0x0070, 0x02, 0x08, 0x0000 },
+    {  25, 0x08000050, 0x0070, 0x02, 0x09, 0x0000 },
+    {  25, 0x08000050, 0x0070, 0x02, 0x0a, 0x0000 },
+    {  25, 0x08000050, 0x0070, 0x02, 0x0b, 0x0000 },
+    {  25, 0x0c000050, 0x0070, 0x02, 0x0c, 0x0000 },
+    {  25, 0x0c000050, 0x0070, 0x02, 0x0d, 0x0000 },
+    {  25, 0x0c000050, 0x0070, 0x02, 0x0e, 0x0000 },
+    {  25, 0x0c000050, 0x0070, 0x02, 0x0f, 0x0000 },
+    {  26, 0x0000005b, 0x005b, 0x00, 0x00, 0x0000 },
+    {  26, 0x0000007b, 0x007b, 0x00, 0x01, 0x0000 },
+    {  26, 0x01000000, 0xffff, 0x00, 0x04, 0x0000 },
+    {  27, 0x0000005d, 0x005d, 0x00, 0x00, 0x0000 },
+    {  27, 0x0000007d, 0x007d, 0x00, 0x01, 0x0000 },
+    {  27, 0x0000007e, 0x007e, 0x00, 0x02, 0x0000 },
+    {  27, 0x0400005d, 0x005d, 0x00, 0x04, 0x0000 },
+    {  28, 0x0c00004d, 0x006d, 0x00, 0x08, 0x0000 },
+    {  29, 0x01000021, 0xffff, 0x04, 0x00, 0x0004 },
+    {  30, 0x00000041, 0x0061, 0x02, 0x00, 0x0000 },
+    {  30, 0x00000041, 0x0041, 0x02, 0x01, 0x0000 },
+    {  30, 0x00000041, 0x0061, 0x02, 0x02, 0x0000 },
+    {  30, 0x00000041, 0x0041, 0x02, 0x03, 0x0000 },
+    {  30, 0x04000041, 0x0061, 0x02, 0x04, 0x0000 },
+    {  30, 0x04000041, 0x0061, 0x02, 0x05, 0x0000 },
+    {  30, 0x04000041, 0x0061, 0x02, 0x06, 0x0000 },
+    {  30, 0x04000041, 0x0061, 0x02, 0x07, 0x0000 },
+    {  30, 0x08000041, 0x0061, 0x02, 0x08, 0x0000 },
+    {  30, 0x08000041, 0x0061, 0x02, 0x09, 0x0000 },
+    {  30, 0x08000041, 0x0061, 0x02, 0x0a, 0x0000 },
+    {  30, 0x08000041, 0x0061, 0x02, 0x0b, 0x0000 },
+    {  30, 0x0c000041, 0x0061, 0x02, 0x0c, 0x0000 },
+    {  30, 0x0c000041, 0x0061, 0x02, 0x0d, 0x0000 },
+    {  30, 0x0c000041, 0x0061, 0x02, 0x0e, 0x0000 },
+    {  30, 0x0c000041, 0x0061, 0x02, 0x0f, 0x0000 },
+    {  31, 0x00000053, 0x0073, 0x02, 0x00, 0x0000 },
+    {  31, 0x00000053, 0x0053, 0x02, 0x01, 0x0000 },
+    {  31, 0x00000053, 0x0073, 0x02, 0x02, 0x0000 },
+    {  31, 0x00000053, 0x0053, 0x02, 0x03, 0x0000 },
+    {  31, 0x04000053, 0x0073, 0x02, 0x04, 0x0000 },
+    {  31, 0x04000053, 0x0073, 0x02, 0x05, 0x0000 },
+    {  31, 0x04000053, 0x0073, 0x02, 0x06, 0x0000 },
+    {  31, 0x04000053, 0x0073, 0x02, 0x07, 0x0000 },
+    {  31, 0x08000053, 0x0073, 0x02, 0x08, 0x0000 },
+    {  31, 0x08000053, 0x0073, 0x02, 0x09, 0x0000 },
+    {  31, 0x08000053, 0x0073, 0x02, 0x0a, 0x0000 },
+    {  31, 0x08000053, 0x0073, 0x02, 0x0b, 0x0000 },
+    {  31, 0x0c000053, 0x0073, 0x02, 0x0c, 0x0000 },
+    {  31, 0x0c000053, 0x0073, 0x02, 0x0d, 0x0000 },
+    {  31, 0x0c000053, 0x0073, 0x02, 0x0e, 0x0000 },
+    {  31, 0x0c000053, 0x0073, 0x02, 0x0f, 0x0000 },
+    {  32, 0x00000044, 0x0064, 0x02, 0x00, 0x0000 },
+    {  32, 0x00000044, 0x0044, 0x02, 0x01, 0x0000 },
+    {  32, 0x00000044, 0x0064, 0x02, 0x02, 0x0000 },
+    {  32, 0x00000044, 0x0044, 0x02, 0x03, 0x0000 },
+    {  32, 0x04000044, 0x0064, 0x02, 0x04, 0x0000 },
+    {  32, 0x04000044, 0x0064, 0x02, 0x05, 0x0000 },
+    {  32, 0x04000044, 0x0064, 0x02, 0x06, 0x0000 },
+    {  32, 0x04000044, 0x0064, 0x02, 0x07, 0x0000 },
+    {  32, 0x08000044, 0x0064, 0x02, 0x08, 0x0000 },
+    {  32, 0x08000044, 0x0064, 0x02, 0x09, 0x0000 },
+    {  32, 0x08000044, 0x0064, 0x02, 0x0a, 0x0000 },
+    {  32, 0x08000044, 0x0064, 0x02, 0x0b, 0x0000 },
+    {  32, 0x0c000044, 0x0064, 0x02, 0x0c, 0x0000 },
+    {  32, 0x0c000044, 0x0064, 0x02, 0x0d, 0x0000 },
+    {  32, 0x0c000044, 0x0064, 0x02, 0x0e, 0x0000 },
+    {  32, 0x0c000044, 0x0064, 0x02, 0x0f, 0x0000 },
+    {  33, 0x00000046, 0x0066, 0x02, 0x00, 0x0000 },
+    {  33, 0x00000046, 0x0046, 0x02, 0x01, 0x0000 },
+    {  33, 0x00000046, 0x0066, 0x02, 0x02, 0x0000 },
+    {  33, 0x00000046, 0x0046, 0x02, 0x03, 0x0000 },
+    {  33, 0x04000046, 0x0066, 0x02, 0x04, 0x0000 },
+    {  33, 0x04000046, 0x0066, 0x02, 0x05, 0x0000 },
+    {  33, 0x04000046, 0x0066, 0x02, 0x06, 0x0000 },
+    {  33, 0x04000046, 0x0066, 0x02, 0x07, 0x0000 },
+    {  33, 0x08000046, 0x0066, 0x02, 0x08, 0x0000 },
+    {  33, 0x08000046, 0x0066, 0x02, 0x09, 0x0000 },
+    {  33, 0x08000046, 0x0066, 0x02, 0x0a, 0x0000 },
+    {  33, 0x08000046, 0x0066, 0x02, 0x0b, 0x0000 },
+    {  33, 0x0c000046, 0x0066, 0x02, 0x0c, 0x0000 },
+    {  33, 0x0c000046, 0x0066, 0x02, 0x0d, 0x0000 },
+    {  33, 0x0c000046, 0x0066, 0x02, 0x0e, 0x0000 },
+    {  33, 0x0c000046, 0x0066, 0x02, 0x0f, 0x0000 },
+    {  34, 0x00000047, 0x0067, 0x02, 0x00, 0x0000 },
+    {  34, 0x00000047, 0x0047, 0x02, 0x01, 0x0000 },
+    {  34, 0x00000047, 0x0067, 0x02, 0x02, 0x0000 },
+    {  34, 0x00000047, 0x0047, 0x02, 0x03, 0x0000 },
+    {  34, 0x04000047, 0x0067, 0x02, 0x04, 0x0000 },
+    {  34, 0x04000047, 0x0067, 0x02, 0x05, 0x0000 },
+    {  34, 0x04000047, 0x0067, 0x02, 0x06, 0x0000 },
+    {  34, 0x04000047, 0x0067, 0x02, 0x07, 0x0000 },
+    {  34, 0x08000047, 0x0067, 0x02, 0x08, 0x0000 },
+    {  34, 0x08000047, 0x0067, 0x02, 0x09, 0x0000 },
+    {  34, 0x08000047, 0x0067, 0x02, 0x0a, 0x0000 },
+    {  34, 0x08000047, 0x0067, 0x02, 0x0b, 0x0000 },
+    {  34, 0x0c000047, 0x0067, 0x02, 0x0c, 0x0000 },
+    {  34, 0x0c000047, 0x0067, 0x02, 0x0d, 0x0000 },
+    {  34, 0x0c000047, 0x0067, 0x02, 0x0e, 0x0000 },
+    {  34, 0x0c000047, 0x0067, 0x02, 0x0f, 0x0000 },
+    {  35, 0x00000048, 0x0068, 0x02, 0x00, 0x0000 },
+    {  35, 0x00000048, 0x0048, 0x02, 0x01, 0x0000 },
+    {  35, 0x00000048, 0x0068, 0x02, 0x02, 0x0000 },
+    {  35, 0x00000048, 0x0048, 0x02, 0x03, 0x0000 },
+    {  35, 0x04000048, 0x0068, 0x02, 0x04, 0x0000 },
+    {  35, 0x04000048, 0x0068, 0x02, 0x05, 0x0000 },
+    {  35, 0x04000048, 0x0068, 0x02, 0x06, 0x0000 },
+    {  35, 0x04000048, 0x0068, 0x02, 0x07, 0x0000 },
+    {  35, 0x08000048, 0x0068, 0x02, 0x08, 0x0000 },
+    {  35, 0x08000048, 0x0068, 0x02, 0x09, 0x0000 },
+    {  35, 0x08000048, 0x0068, 0x02, 0x0a, 0x0000 },
+    {  35, 0x08000048, 0x0068, 0x02, 0x0b, 0x0000 },
+    {  35, 0x0c000048, 0x0068, 0x02, 0x0c, 0x0000 },
+    {  35, 0x0c000048, 0x0068, 0x02, 0x0d, 0x0000 },
+    {  35, 0x0c000048, 0x0068, 0x02, 0x0e, 0x0000 },
+    {  35, 0x0c000048, 0x0068, 0x02, 0x0f, 0x0000 },
+    {  36, 0x0000004a, 0x006a, 0x02, 0x00, 0x0000 },
+    {  36, 0x0000004a, 0x004a, 0x02, 0x01, 0x0000 },
+    {  36, 0x0000004a, 0x006a, 0x02, 0x02, 0x0000 },
+    {  36, 0x0000004a, 0x004a, 0x02, 0x03, 0x0000 },
+    {  36, 0x0400004a, 0x006a, 0x02, 0x04, 0x0000 },
+    {  36, 0x0400004a, 0x006a, 0x02, 0x05, 0x0000 },
+    {  36, 0x0400004a, 0x006a, 0x02, 0x06, 0x0000 },
+    {  36, 0x0400004a, 0x006a, 0x02, 0x07, 0x0000 },
+    {  36, 0x0800004a, 0x006a, 0x02, 0x08, 0x0000 },
+    {  36, 0x0800004a, 0x006a, 0x02, 0x09, 0x0000 },
+    {  36, 0x0800004a, 0x006a, 0x02, 0x0a, 0x0000 },
+    {  36, 0x0800004a, 0x006a, 0x02, 0x0b, 0x0000 },
+    {  36, 0x0c00004a, 0x006a, 0x02, 0x0c, 0x0000 },
+    {  36, 0x0c00004a, 0x006a, 0x02, 0x0d, 0x0000 },
+    {  36, 0x0c00004a, 0x006a, 0x02, 0x0e, 0x0000 },
+    {  36, 0x0c00004a, 0x006a, 0x02, 0x0f, 0x0000 },
+    {  37, 0x0000004b, 0x006b, 0x02, 0x00, 0x0000 },
+    {  37, 0x0000004b, 0x004b, 0x02, 0x01, 0x0000 },
+    {  37, 0x0000004b, 0x006b, 0x02, 0x02, 0x0000 },
+    {  37, 0x0000004b, 0x004b, 0x02, 0x03, 0x0000 },
+    {  37, 0x0400004b, 0x006b, 0x02, 0x04, 0x0000 },
+    {  37, 0x0400004b, 0x006b, 0x02, 0x05, 0x0000 },
+    {  37, 0x0400004b, 0x006b, 0x02, 0x06, 0x0000 },
+    {  37, 0x0400004b, 0x006b, 0x02, 0x07, 0x0000 },
+    {  37, 0x0800004b, 0x006b, 0x02, 0x08, 0x0000 },
+    {  37, 0x0800004b, 0x006b, 0x02, 0x09, 0x0000 },
+    {  37, 0x0800004b, 0x006b, 0x02, 0x0a, 0x0000 },
+    {  37, 0x0800004b, 0x006b, 0x02, 0x0b, 0x0000 },
+    {  37, 0x0c00004b, 0x006b, 0x02, 0x0c, 0x0000 },
+    {  37, 0x0c00004b, 0x006b, 0x02, 0x0d, 0x0000 },
+    {  37, 0x0c00004b, 0x006b, 0x02, 0x0e, 0x0000 },
+    {  37, 0x0c00004b, 0x006b, 0x02, 0x0f, 0x0000 },
+    {  38, 0x0000004c, 0x006c, 0x02, 0x00, 0x0000 },
+    {  38, 0x0000004c, 0x004c, 0x02, 0x01, 0x0000 },
+    {  38, 0x0000004c, 0x006c, 0x02, 0x02, 0x0000 },
+    {  38, 0x0000004c, 0x004c, 0x02, 0x03, 0x0000 },
+    {  38, 0x0400004c, 0x006c, 0x02, 0x04, 0x0000 },
+    {  38, 0x0400004c, 0x006c, 0x02, 0x05, 0x0000 },
+    {  38, 0x0400004c, 0x006c, 0x02, 0x06, 0x0000 },
+    {  38, 0x0400004c, 0x006c, 0x02, 0x07, 0x0000 },
+    {  38, 0x0800004c, 0x006c, 0x02, 0x08, 0x0000 },
+    {  38, 0x0800004c, 0x006c, 0x02, 0x09, 0x0000 },
+    {  38, 0x0800004c, 0x006c, 0x02, 0x0a, 0x0000 },
+    {  38, 0x0800004c, 0x006c, 0x02, 0x0b, 0x0000 },
+    {  38, 0x0c00004c, 0x006c, 0x02, 0x0c, 0x0000 },
+    {  38, 0x0c00004c, 0x006c, 0x02, 0x0d, 0x0000 },
+    {  38, 0x0c00004c, 0x006c, 0x02, 0x0e, 0x0000 },
+    {  38, 0x0c00004c, 0x006c, 0x02, 0x0f, 0x0000 },
+    {  39, 0x0000003b, 0x003b, 0x00, 0x00, 0x0000 },
+    {  39, 0x0000003a, 0x003a, 0x00, 0x01, 0x0000 },
+    {  40, 0x00000027, 0x0027, 0x00, 0x00, 0x0000 },
+    {  40, 0x00000022, 0x0022, 0x00, 0x01, 0x0000 },
+    {  40, 0x01001251, 0x0027, 0x01, 0x02, 0x0000 },
+    {  40, 0x01001257, 0x0022, 0x01, 0x03, 0x0000 },
+    {  40, 0x04000047, 0x0067, 0x00, 0x04, 0x0000 },
+    {  41, 0x00000060, 0x0060, 0x00, 0x00, 0x0000 },
+    {  41, 0x0000007e, 0x007e, 0x00, 0x01, 0x0000 },
+    {  41, 0x01001250, 0x0060, 0x01, 0x02, 0x0000 },
+    {  41, 0x01001253, 0x007e, 0x01, 0x03, 0x0000 },
+    {  42, 0x01000020, 0xffff, 0x04, 0x00, 0x0001 },
+    {  43, 0x0000005c, 0x005c, 0x00, 0x00, 0x0000 },
+    {  43, 0x0000007c, 0x007c, 0x00, 0x01, 0x0000 },
+    {  43, 0x0400005c, 0x005c, 0x00, 0x04, 0x0000 },
+    {  44, 0x0000005a, 0x007a, 0x02, 0x00, 0x0000 },
+    {  44, 0x0000005a, 0x005a, 0x02, 0x01, 0x0000 },
+    {  44, 0x0000005a, 0x007a, 0x02, 0x02, 0x0000 },
+    {  44, 0x0000005a, 0x005a, 0x02, 0x03, 0x0000 },
+    {  44, 0x0400005a, 0x007a, 0x02, 0x04, 0x0000 },
+    {  44, 0x0400005a, 0x007a, 0x02, 0x05, 0x0000 },
+    {  44, 0x0400005a, 0x007a, 0x02, 0x06, 0x0000 },
+    {  44, 0x0400005a, 0x007a, 0x02, 0x07, 0x0000 },
+    {  44, 0x0800005a, 0x007a, 0x02, 0x08, 0x0000 },
+    {  44, 0x0800005a, 0x007a, 0x02, 0x09, 0x0000 },
+    {  44, 0x0800005a, 0x007a, 0x02, 0x0a, 0x0000 },
+    {  44, 0x0800005a, 0x007a, 0x02, 0x0b, 0x0000 },
+    {  44, 0x0c00005a, 0x007a, 0x02, 0x0c, 0x0000 },
+    {  44, 0x0c00005a, 0x007a, 0x02, 0x0d, 0x0000 },
+    {  44, 0x0c00005a, 0x007a, 0x02, 0x0e, 0x0000 },
+    {  44, 0x0c00005a, 0x007a, 0x02, 0x0f, 0x0000 },
+    {  45, 0x00000058, 0x0078, 0x02, 0x00, 0x0000 },
+    {  45, 0x00000058, 0x0058, 0x02, 0x01, 0x0000 },
+    {  45, 0x00000058, 0x0078, 0x02, 0x02, 0x0000 },
+    {  45, 0x00000058, 0x0058, 0x02, 0x03, 0x0000 },
+    {  45, 0x04000058, 0x0078, 0x02, 0x04, 0x0000 },
+    {  45, 0x04000058, 0x0078, 0x02, 0x05, 0x0000 },
+    {  45, 0x04000058, 0x0078, 0x02, 0x06, 0x0000 },
+    {  45, 0x04000058, 0x0078, 0x02, 0x07, 0x0000 },
+    {  45, 0x08000058, 0x0078, 0x02, 0x08, 0x0000 },
+    {  45, 0x08000058, 0x0078, 0x02, 0x09, 0x0000 },
+    {  45, 0x08000058, 0x0078, 0x02, 0x0a, 0x0000 },
+    {  45, 0x08000058, 0x0078, 0x02, 0x0b, 0x0000 },
+    {  45, 0x0c000058, 0x0078, 0x02, 0x0c, 0x0000 },
+    {  45, 0x0c000058, 0x0078, 0x02, 0x0d, 0x0000 },
+    {  45, 0x0c000058, 0x0078, 0x02, 0x0e, 0x0000 },
+    {  45, 0x0c000058, 0x0078, 0x02, 0x0f, 0x0000 },
+    {  46, 0x00000043, 0x0063, 0x02, 0x00, 0x0000 },
+    {  46, 0x00000043, 0x0043, 0x02, 0x01, 0x0000 },
+    {  46, 0x00000043, 0x0063, 0x02, 0x02, 0x0000 },
+    {  46, 0x00000043, 0x0043, 0x02, 0x03, 0x0000 },
+    {  46, 0x04000043, 0x0063, 0x02, 0x04, 0x0000 },
+    {  46, 0x04000043, 0x0063, 0x02, 0x05, 0x0000 },
+    {  46, 0x04000043, 0x0063, 0x02, 0x06, 0x0000 },
+    {  46, 0x04000043, 0x0063, 0x02, 0x07, 0x0000 },
+    {  46, 0x08000043, 0x0063, 0x02, 0x08, 0x0000 },
+    {  46, 0x08000043, 0x0063, 0x02, 0x09, 0x0000 },
+    {  46, 0x08000043, 0x0063, 0x02, 0x0a, 0x0000 },
+    {  46, 0x08000043, 0x0063, 0x02, 0x0b, 0x0000 },
+    {  46, 0x0c000043, 0x0063, 0x02, 0x0c, 0x0000 },
+    {  46, 0x0c000043, 0x0063, 0x02, 0x0d, 0x0000 },
+    {  46, 0x0c000043, 0x0063, 0x02, 0x0e, 0x0000 },
+    {  46, 0x0c000043, 0x0063, 0x02, 0x0f, 0x0000 },
+    {  47, 0x00000056, 0x0076, 0x02, 0x00, 0x0000 },
+    {  47, 0x00000056, 0x0056, 0x02, 0x01, 0x0000 },
+    {  47, 0x00000056, 0x0076, 0x02, 0x02, 0x0000 },
+    {  47, 0x00000056, 0x0056, 0x02, 0x03, 0x0000 },
+    {  47, 0x04000056, 0x0076, 0x02, 0x04, 0x0000 },
+    {  47, 0x04000056, 0x0076, 0x02, 0x05, 0x0000 },
+    {  47, 0x04000056, 0x0076, 0x02, 0x06, 0x0000 },
+    {  47, 0x04000056, 0x0076, 0x02, 0x07, 0x0000 },
+    {  47, 0x08000056, 0x0076, 0x02, 0x08, 0x0000 },
+    {  47, 0x08000056, 0x0076, 0x02, 0x09, 0x0000 },
+    {  47, 0x08000056, 0x0076, 0x02, 0x0a, 0x0000 },
+    {  47, 0x08000056, 0x0076, 0x02, 0x0b, 0x0000 },
+    {  47, 0x0c000056, 0x0076, 0x02, 0x0c, 0x0000 },
+    {  47, 0x0c000056, 0x0076, 0x02, 0x0d, 0x0000 },
+    {  47, 0x0c000056, 0x0076, 0x02, 0x0e, 0x0000 },
+    {  47, 0x0c000056, 0x0076, 0x02, 0x0f, 0x0000 },
+    {  48, 0x00000042, 0x0062, 0x02, 0x00, 0x0000 },
+    {  48, 0x00000042, 0x0042, 0x02, 0x01, 0x0000 },
+    {  48, 0x00000042, 0x0062, 0x02, 0x02, 0x0000 },
+    {  48, 0x00000042, 0x0042, 0x02, 0x03, 0x0000 },
+    {  48, 0x04000042, 0x0062, 0x02, 0x04, 0x0000 },
+    {  48, 0x04000042, 0x0062, 0x02, 0x05, 0x0000 },
+    {  48, 0x04000042, 0x0062, 0x02, 0x06, 0x0000 },
+    {  48, 0x04000042, 0x0062, 0x02, 0x07, 0x0000 },
+    {  48, 0x08000042, 0x0062, 0x02, 0x08, 0x0000 },
+    {  48, 0x08000042, 0x0062, 0x02, 0x09, 0x0000 },
+    {  48, 0x08000042, 0x0062, 0x02, 0x0a, 0x0000 },
+    {  48, 0x08000042, 0x0062, 0x02, 0x0b, 0x0000 },
+    {  48, 0x0c000042, 0x0062, 0x02, 0x0c, 0x0000 },
+    {  48, 0x0c000042, 0x0062, 0x02, 0x0d, 0x0000 },
+    {  48, 0x0c000042, 0x0062, 0x02, 0x0e, 0x0000 },
+    {  48, 0x0c000042, 0x0062, 0x02, 0x0f, 0x0000 },
+    {  49, 0x0000004e, 0x006e, 0x02, 0x00, 0x0000 },
+    {  49, 0x0000004e, 0x004e, 0x02, 0x01, 0x0000 },
+    {  49, 0x0000004e, 0x006e, 0x02, 0x02, 0x0000 },
+    {  49, 0x0000004e, 0x004e, 0x02, 0x03, 0x0000 },
+    {  49, 0x0400004e, 0x006e, 0x02, 0x04, 0x0000 },
+    {  49, 0x0400004e, 0x006e, 0x02, 0x05, 0x0000 },
+    {  49, 0x0400004e, 0x006e, 0x02, 0x06, 0x0000 },
+    {  49, 0x0400004e, 0x006e, 0x02, 0x07, 0x0000 },
+    {  49, 0x0800004e, 0x006e, 0x02, 0x08, 0x0000 },
+    {  49, 0x0800004e, 0x006e, 0x02, 0x09, 0x0000 },
+    {  49, 0x0800004e, 0x006e, 0x02, 0x0a, 0x0000 },
+    {  49, 0x0800004e, 0x006e, 0x02, 0x0b, 0x0000 },
+    {  49, 0x0c00004e, 0x006e, 0x02, 0x0c, 0x0000 },
+    {  49, 0x0c00004e, 0x006e, 0x02, 0x0d, 0x0000 },
+    {  49, 0x0c00004e, 0x006e, 0x02, 0x0e, 0x0000 },
+    {  49, 0x0c00004e, 0x006e, 0x02, 0x0f, 0x0000 },
+    {  50, 0x0000004d, 0x006d, 0x02, 0x00, 0x0000 },
+    {  50, 0x0000004d, 0x004d, 0x02, 0x01, 0x0000 },
+    {  50, 0x0000004d, 0x006d, 0x02, 0x02, 0x0000 },
+    {  50, 0x0000004d, 0x004d, 0x02, 0x03, 0x0000 },
+    {  50, 0x0400004d, 0x006d, 0x02, 0x04, 0x0000 },
+    {  50, 0x0400004d, 0x006d, 0x02, 0x05, 0x0000 },
+    {  50, 0x0400004d, 0x006d, 0x02, 0x06, 0x0000 },
+    {  50, 0x0400004d, 0x006d, 0x02, 0x07, 0x0000 },
+    {  50, 0x0800004d, 0x006d, 0x02, 0x08, 0x0000 },
+    {  50, 0x0800004d, 0x006d, 0x02, 0x09, 0x0000 },
+    {  50, 0x0800004d, 0x006d, 0x02, 0x0a, 0x0000 },
+    {  50, 0x0800004d, 0x006d, 0x02, 0x0b, 0x0000 },
+    {  50, 0x0c00004d, 0x006d, 0x02, 0x0c, 0x0000 },
+    {  50, 0x0c00004d, 0x006d, 0x02, 0x0d, 0x0000 },
+    {  50, 0x0c00004d, 0x006d, 0x02, 0x0e, 0x0000 },
+    {  50, 0x0c00004d, 0x006d, 0x02, 0x0f, 0x0000 },
+    {  51, 0x0000002c, 0x002c, 0x00, 0x00, 0x0000 },
+    {  51, 0x0000003c, 0x003c, 0x00, 0x01, 0x0000 },
+    {  51, 0x0100125b, 0x002c, 0x01, 0x02, 0x0000 },
+    {  52, 0x0000002e, 0x002e, 0x00, 0x00, 0x0000 },
+    {  52, 0x0000003e, 0x003e, 0x00, 0x01, 0x0000 },
+    {  52, 0x01001120, 0xffff, 0x00, 0x02, 0x0000 },
+    {  53, 0x0000002f, 0x002f, 0x00, 0x00, 0x0000 },
+    {  53, 0x0000003f, 0x003f, 0x00, 0x01, 0x0000 },
+    {  53, 0x01000003, 0xffff, 0x00, 0x04, 0x0000 },
+    {  54, 0x01000020, 0xffff, 0x04, 0x00, 0x0001 },
+    {  55, 0x2000002a, 0x002a, 0x00, 0x00, 0x0000 },
+    {  56, 0x01000023, 0xffff, 0x04, 0x00, 0x0008 },
+    {  57, 0x00000020, 0x0020, 0x00, 0x00, 0x0000 },
+    {  58, 0x01000024, 0xffff, 0x00, 0x00, 0x0000 },
+    {  59, 0x01000030, 0xffff, 0x00, 0x00, 0x0000 },
+    {  59, 0x0100003c, 0xffff, 0x00, 0x01, 0x0000 },
+    {  59, 0x01000048, 0xffff, 0x00, 0x04, 0x0000 },
+    {  59, 0x01000000, 0xffff, 0x08, 0x0c, 0x0100 },
+    {  60, 0x01000031, 0xffff, 0x00, 0x00, 0x0000 },
+    {  60, 0x0100003d, 0xffff, 0x00, 0x01, 0x0000 },
+    {  60, 0x01000049, 0xffff, 0x00, 0x04, 0x0000 },
+    {  60, 0x01000000, 0xffff, 0x08, 0x0c, 0x0101 },
+    {  61, 0x01000032, 0xffff, 0x00, 0x00, 0x0000 },
+    {  61, 0x0100003e, 0xffff, 0x00, 0x01, 0x0000 },
+    {  61, 0x0100004a, 0xffff, 0x00, 0x04, 0x0000 },
+    {  61, 0x01000000, 0xffff, 0x08, 0x0c, 0x0102 },
+    {  62, 0x01000033, 0xffff, 0x00, 0x00, 0x0000 },
+    {  62, 0x0100003f, 0xffff, 0x00, 0x01, 0x0000 },
+    {  62, 0x0100004b, 0xffff, 0x00, 0x04, 0x0000 },
+    {  62, 0x01000000, 0xffff, 0x08, 0x0c, 0x0103 },
+    {  63, 0x01000034, 0xffff, 0x00, 0x00, 0x0000 },
+    {  63, 0x01000040, 0xffff, 0x00, 0x01, 0x0000 },
+    {  63, 0x0100004c, 0xffff, 0x00, 0x04, 0x0000 },
+    {  63, 0x01000000, 0xffff, 0x08, 0x0c, 0x0104 },
+    {  64, 0x01000035, 0xffff, 0x00, 0x00, 0x0000 },
+    {  64, 0x01000041, 0xffff, 0x00, 0x01, 0x0000 },
+    {  64, 0x0100004d, 0xffff, 0x00, 0x04, 0x0000 },
+    {  64, 0x01000000, 0xffff, 0x08, 0x0c, 0x0105 },
+    {  65, 0x01000036, 0xffff, 0x00, 0x00, 0x0000 },
+    {  65, 0x01000042, 0xffff, 0x00, 0x01, 0x0000 },
+    {  65, 0x0100004e, 0xffff, 0x00, 0x04, 0x0000 },
+    {  65, 0x01000000, 0xffff, 0x08, 0x0c, 0x0106 },
+    {  66, 0x01000037, 0xffff, 0x00, 0x00, 0x0000 },
+    {  66, 0x01000043, 0xffff, 0x00, 0x01, 0x0000 },
+    {  66, 0x0100004f, 0xffff, 0x00, 0x04, 0x0000 },
+    {  66, 0x01000000, 0xffff, 0x08, 0x0c, 0x0107 },
+    {  67, 0x01000038, 0xffff, 0x00, 0x00, 0x0000 },
+    {  67, 0x01000044, 0xffff, 0x00, 0x01, 0x0000 },
+    {  67, 0x01000050, 0xffff, 0x00, 0x04, 0x0000 },
+    {  67, 0x01000000, 0xffff, 0x08, 0x0c, 0x0108 },
+    {  68, 0x01000039, 0xffff, 0x00, 0x00, 0x0000 },
+    {  68, 0x01000045, 0xffff, 0x00, 0x01, 0x0000 },
+    {  68, 0x01000051, 0xffff, 0x00, 0x04, 0x0000 },
+    {  68, 0x01000000, 0xffff, 0x08, 0x0c, 0x0109 },
+    {  69, 0x01000025, 0xffff, 0x00, 0x00, 0x0000 },
+    {  70, 0x01000026, 0xffff, 0x00, 0x00, 0x0000 },
+    {  70, 0x01000026, 0xffff, 0x00, 0x08, 0x0000 },
+    {  71, 0x01000010, 0xffff, 0x10, 0x00, 0x0000 },
+    {  71, 0x20000037, 0x0037, 0x10, 0x01, 0x0000 },
+    {  72, 0x01000013, 0xffff, 0x10, 0x00, 0x0000 },
+    {  72, 0x20000038, 0x0038, 0x10, 0x01, 0x0000 },
+    {  73, 0x01000016, 0xffff, 0x10, 0x00, 0x0000 },
+    {  73, 0x20000039, 0x0039, 0x10, 0x01, 0x0000 },
+    {  74, 0x2000002d, 0x002d, 0x00, 0x00, 0x0000 },
+    {  75, 0x01000012, 0xffff, 0x10, 0x00, 0x0000 },
+    {  75, 0x20000034, 0x0034, 0x10, 0x01, 0x0000 },
+    {  76, 0x20000035, 0x0035, 0x10, 0x01, 0x0000 },
+    {  77, 0x01000014, 0xffff, 0x10, 0x00, 0x0000 },
+    {  77, 0x20000036, 0x0036, 0x10, 0x01, 0x0000 },
+    {  78, 0x2000002b, 0x002b, 0x00, 0x00, 0x0000 },
+    {  79, 0x01000011, 0xffff, 0x10, 0x00, 0x0000 },
+    {  79, 0x20000031, 0x0031, 0x10, 0x01, 0x0000 },
+    {  80, 0x01000015, 0xffff, 0x10, 0x00, 0x0000 },
+    {  80, 0x20000032, 0x0032, 0x10, 0x01, 0x0000 },
+    {  81, 0x01000017, 0xffff, 0x10, 0x00, 0x0000 },
+    {  81, 0x20000033, 0x0033, 0x10, 0x01, 0x0000 },
+    {  82, 0x01000006, 0xffff, 0x10, 0x00, 0x0000 },
+    {  82, 0x20000030, 0x0030, 0x10, 0x01, 0x0000 },
+    {  83, 0x01000007, 0xffff, 0x10, 0x00, 0x0000 },
+    {  83, 0x2000002e, 0x002e, 0x10, 0x01, 0x0000 },
+    {  83, 0x01000000, 0xffff, 0x08, 0x06, 0x0200 },
+    {  83, 0x01000000, 0xffff, 0x08, 0x0c, 0x0200 },
+    {  86, 0x0000003c, 0x003c, 0x00, 0x00, 0x0000 },
+    {  86, 0x0000003e, 0x003e, 0x00, 0x01, 0x0000 },
+    {  86, 0x0000007c, 0x007c, 0x00, 0x02, 0x0000 },
+    {  87, 0x0100003a, 0xffff, 0x00, 0x00, 0x0000 },
+    {  87, 0x01000046, 0xffff, 0x00, 0x01, 0x0000 },
+    {  87, 0x01000052, 0xffff, 0x00, 0x04, 0x0000 },
+    {  87, 0x01000000, 0xffff, 0x08, 0x0c, 0x010a },
+    {  88, 0x0100003b, 0xffff, 0x00, 0x00, 0x0000 },
+    {  88, 0x01000047, 0xffff, 0x00, 0x01, 0x0000 },
+    {  88, 0x01000000, 0xffff, 0x08, 0x0c, 0x010b },
+    {  92, 0x01001123, 0xffff, 0x00, 0x00, 0x0000 },
+    {  93, 0x01001127, 0xffff, 0x00, 0x00, 0x0000 },
+    {  94, 0x01001122, 0xffff, 0x00, 0x00, 0x0000 },
+    {  96, 0x21000005, 0xffff, 0x00, 0x00, 0x0000 },
+    {  97, 0x01000021, 0xffff, 0x04, 0x00, 0x0004 },
+    {  98, 0x2000002f, 0x002f, 0x00, 0x00, 0x0000 },
+    {  99, 0x0400005c, 0x005c, 0x00, 0x00, 0x0000 },
+    { 100, 0x01001103, 0xffff, 0x04, 0x00, 0x0002 },
+    { 102, 0x01000010, 0xffff, 0x00, 0x00, 0x0000 },
+    { 104, 0x01000016, 0xffff, 0x00, 0x00, 0x0000 },
+    { 105, 0x01000000, 0xffff, 0x08, 0x0c, 0x0180 },
+    { 106, 0x01000000, 0xffff, 0x08, 0x0c, 0x0181 },
+    { 107, 0x01000011, 0xffff, 0x00, 0x00, 0x0000 },
+    { 109, 0x01000017, 0xffff, 0x00, 0x00, 0x0000 },
+    { 110, 0x01000006, 0xffff, 0x00, 0x00, 0x0000 },
+    { 111, 0x01000007, 0xffff, 0x00, 0x00, 0x0000 },
+    { 111, 0x01000000, 0xffff, 0x08, 0x06, 0x0200 },
+    { 111, 0x01000000, 0xffff, 0x08, 0x0c, 0x0200 },
+
+    // Additional keymaps for keyboards
+    { 122, Qt::Key_Hangul,  0Xffff, 0x00, 0x00, 0x0000 },
+    { 125, Qt::Key_Super_L, 0xffff, 0x00, 0x00, 0x0000 }, // LEFT_META (Windows key)
+    { 126, Qt::Key_Super_L, 0xffff, 0x00, 0x00, 0x0000 }, // RIGHT_COMMAND (Mac key)
+
+};
+
+#endif // QEMULATORKEYBOARDHANDLER_DEFAULTMAP_P_H
diff --git a/src/plugins/platforms/minimalegl/qemulatorkeyboardhandler.cpp b/src/plugins/platforms/minimalegl/qemulatorkeyboardhandler.cpp
new file mode 100644
index 0000000000..5c98a04291
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/qemulatorkeyboardhandler.cpp
@@ -0,0 +1,156 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qemulatorkeyboardhandler.h"
+#ifdef MULTIINPUT_SUPPORT
+#include "qemulatorinputmanager.h"
+#endif
+
+#include <QEvent>
+#include <QDebug>
+#include <qpa/qwindowsysteminterface.h>
+
+QT_BEGIN_NAMESPACE
+
+#include "qemulatorkeyboard_defaultmap_p.h"
+
+QEmulatorKeyboardHandler* QEmulatorKeyboardHandler::s_instance = NULL;
+
+QEmulatorKeyboardHandler::QEmulatorKeyboardHandler()
+    : m_modifiers(0), m_dead_unicode(0xffff),
+      m_keymap(0), m_keymap_size(0)
+{
+    m_lockStates[Qt::Key_CapsLock  ] = false;
+    m_lockStates[Qt::Key_NumLock   ] = false;
+    m_lockStates[Qt::Key_ScrollLock] = false;
+
+    loadDefaultKeymap();
+}
+
+QEmulatorKeyboardHandler::~QEmulatorKeyboardHandler()
+{
+    m_lockStates.clear();
+}
+
+void QEmulatorKeyboardHandler::handleKeyEvent(int nativecode, int qtcode, Qt::KeyboardModifiers modifiers,
+                                              int unicode, bool isPress, bool autoRepeat)
+{
+    QString str = (unicode == m_dead_unicode)? "" : QString(unicode);
+    QEvent::Type keyType = isPress ? QEvent::KeyPress : QEvent::KeyRelease;
+    QWindowSystemInterface::handleExtendedKeyEvent(0, keyType, qtcode, modifiers, nativecode + 8, 0,
+                                                   int(modifiers), str, autoRepeat);
+#ifdef DEBUG_KEY_EVENT
+    qDebug("QPA: handleExtendedKeyEvent nativecode=%d (->%d), qtcode=0x%x, modifiers=0x%x isPress=%d, autoRepeat=%d", nativecode, nativecode+8, qtcode, (unsigned)modifiers, isPress, autoRepeat);
+#endif
+}
+
+#ifdef MULTIINPUT_SUPPORT
+bool QEmulatorKeyboardHandler::processKeycode(quint16 keycode, bool pressed, bool autorepeat, int deviceID)
+#else
+bool QEmulatorKeyboardHandler::processKeycode(quint16 keycode, bool pressed, bool autorepeat)
+#endif
+{
+    bool first_press = pressed && !autorepeat;
+
+    const QEmulatorKeyboardMap::Mapping *map_plain = 0;
+    const QEmulatorKeyboardMap::Mapping *map_withmod = 0;
+
+    quint8 modifiers = m_modifiers;
+
+    // get a specific and plain mapping for the keycode and the current modifiers
+    for (int i = 0; i < m_keymap_size && !(map_plain && map_withmod); ++i) {
+        const QEmulatorKeyboardMap::Mapping *m = m_keymap + i;
+        if (m->keycode == keycode) {
+            if (m->modifiers == 0)
+                map_plain = m;
+
+            quint8 testmods = m_modifiers;
+            if (m_lockStates[Qt::Key_CapsLock] && (m->flags & QEmulatorKeyboardMap::IsLetter)) {
+                testmods ^= QEmulatorKeyboardMap::ModShift;
+            }
+            if (m_lockStates[Qt::Key_NumLock] && (m->flags & QEmulatorKeyboardMap::IsKeypad)) {
+                testmods |= QEmulatorKeyboardMap::ModShift;
+            }
+            if (m->modifiers == testmods) {
+                map_withmod = m;
+            }
+        }
+    }
+
+    if (m_lockStates[Qt::Key_CapsLock] && map_withmod && (map_withmod->flags & QEmulatorKeyboardMap::IsLetter))
+        modifiers ^= QEmulatorKeyboardMap::ModShift;
+
+    const QEmulatorKeyboardMap::Mapping *it = map_withmod ? map_withmod : map_plain;
+
+    if (!it) {
+#ifdef DEBUG_KEY_EVENT
+        // we couldn't even find a plain mapping
+        qWarning("QPA: key ignored keycode=%d, modifiers=0x%x", keycode, m_modifiers);
+#endif
+        return false;
+    }
+
+    bool skip = false;
+    quint16 unicode = it->unicode;
+    quint32 qtcode = it->qtcode;
+
+    if ((it->flags & QEmulatorKeyboardMap::IsModifier) && it->special) {
+        // modifier
+        if (pressed) {
+            m_modifiers |= quint8(it->special);
+        } else {
+            m_modifiers &= ~quint8(it->special);
+        }
+    } else if (qtcode >= Qt::Key_CapsLock && qtcode <= Qt::Key_ScrollLock) {
+        if (first_press) {
+            m_lockStates[qtcode] = !m_lockStates[qtcode];
+        }
+    }
+
+    if (!skip) {
+        // a normal key
+        const int modmask = Qt::ShiftModifier | Qt::ControlModifier | Qt::AltModifier | Qt::MetaModifier | Qt::KeypadModifier;
+
+        if ((it == map_plain && it != map_withmod) ||
+            (map_withmod && !(map_withmod->qtcode & modmask))) {
+            qtcode |= QEmulatorKeyboardHandler::toQtModifiers(modifiers);
+        }
+
+#ifdef MULTIINPUT_SUPPORT
+        Qt::KeyboardModifiers orgModifiers = Qt::KeyboardModifiers(qtcode & modmask);
+        handleKeyEvent(keycode, qtcode & ~modmask,
+                       QEmulatorInputManager::instance()->makeCustomModsWithDeviceId(deviceID, orgModifiers),
+                       unicode, pressed, autorepeat);
+#else
+        handleKeyEvent(keycode, qtcode & ~modmask, Qt::KeyboardModifiers(qtcode & modmask), unicode, pressed, autorepeat);
+#endif
+    }
+    return true;
+}
+
+void QEmulatorKeyboardHandler::loadDefaultKeymap()
+{
+#ifdef DEBUG_KEY_EVENT
+    qDebug() << "QPA: load default keymap";
+#endif
+
+    m_keymap = s_default_keymap;
+    m_keymap_size = sizeof(s_default_keymap) / sizeof(s_default_keymap[0]);
+}
+
+QT_END_NAMESPACE
diff --git a/src/plugins/platforms/minimalegl/qemulatorkeyboardhandler.h b/src/plugins/platforms/minimalegl/qemulatorkeyboardhandler.h
new file mode 100644
index 0000000000..c7da601d00
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/qemulatorkeyboardhandler.h
@@ -0,0 +1,120 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QEMULATORKEYBOARDHANDLER_H
+#define QEMULATORKEYBOARDHANDLER_H
+
+#include <QDataStream>
+#include <QMap>
+
+QT_BEGIN_NAMESPACE
+
+namespace QEmulatorKeyboardMap {
+    struct Mapping {
+        quint16 keycode;
+        quint32 qtcode;
+        quint16 unicode;
+        quint8 flags;
+        quint8 modifiers;
+        quint16 special;
+    };
+
+    enum Flags {
+        IsDead     = 0x01,
+        IsLetter   = 0x02,
+        IsModifier = 0x04,
+        IsSystem   = 0x08,
+        IsKeypad   = 0x10,
+    };
+
+    enum Modifiers {
+        ModPlain   = 0x00,
+        ModShift   = 0x01,
+        ModAltGr   = 0x02,
+        ModControl = 0x04,
+        ModAlt     = 0x08,
+        ModShiftL  = 0x10,
+        ModShiftR  = 0x20,
+        ModCtrlL   = 0x40,
+        ModCtrlR   = 0x80
+    };
+}
+
+inline QDataStream &operator>>(QDataStream &ds, QEmulatorKeyboardMap::Mapping &m)
+{
+    return ds >> m.keycode >> m.qtcode >> m.unicode >> m.flags >> m.modifiers >> m.special;
+}
+
+inline QDataStream &operator<<(QDataStream &ds, const QEmulatorKeyboardMap::Mapping &m)
+{
+    return ds << m.keycode << m.qtcode << m.unicode << m.flags << m.modifiers << m.special;
+}
+
+
+class QEmulatorKeyboardHandler
+{
+
+public:
+    QEmulatorKeyboardHandler();
+    ~QEmulatorKeyboardHandler();
+
+    static QEmulatorKeyboardHandler* instance() {
+        if (!s_instance) s_instance = new QEmulatorKeyboardHandler();
+        return s_instance;
+    }
+
+    static Qt::KeyboardModifiers toQtModifiers(quint8 mod)
+    {
+        Qt::KeyboardModifiers qtmod = Qt::NoModifier;
+
+        if (mod & (QEmulatorKeyboardMap::ModShift | QEmulatorKeyboardMap::ModShiftL | QEmulatorKeyboardMap::ModShiftR))
+            qtmod |= Qt::ShiftModifier;
+        if (mod & (QEmulatorKeyboardMap::ModControl | QEmulatorKeyboardMap::ModCtrlL | QEmulatorKeyboardMap::ModCtrlR))
+            qtmod |= Qt::ControlModifier;
+        if (mod & QEmulatorKeyboardMap::ModAlt)
+            qtmod |= Qt::AltModifier;
+
+        return qtmod;
+    }
+
+#ifdef MULTIINPUT_SUPPORT
+    bool processKeycode(quint16 keycode, bool pressed, bool autorepeat, int deviceID);
+#else
+    bool processKeycode(quint16 keycode, bool pressed, bool autorepeat);
+#endif
+
+private:
+    void loadDefaultKeymap();
+    void handleKeyEvent(int nativecode, int qtcode, Qt::KeyboardModifiers modifiers,
+                        int unicode, bool isPress, bool autoRepeat);
+
+    const QEmulatorKeyboardMap::Mapping *m_keymap;
+    int m_keymap_size;
+
+    // keymap handling
+    quint8 m_modifiers;
+    QMap<quint32, bool> m_lockStates;
+    quint16 m_dead_unicode;
+
+    static const QEmulatorKeyboardMap::Mapping s_default_keymap[];
+    static QEmulatorKeyboardHandler* s_instance;
+};
+
+QT_END_NAMESPACE
+#endif // QEMULATORKEYBOARDHANDLER_H
+
diff --git a/src/plugins/platforms/minimalegl/qemulatorkeyboardmanager.cpp b/src/plugins/platforms/minimalegl/qemulatorkeyboardmanager.cpp
new file mode 100644
index 0000000000..ca58526675
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/qemulatorkeyboardmanager.cpp
@@ -0,0 +1,165 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qemulatorkeyboardmanager.h"
+
+#include <private/qcore_unix_p.h>
+#include <linux/input.h>
+
+#include <QStringList>
+#include <QCoreApplication>
+
+//#define QT_QPA_KEYMAP_DEBUG
+
+#ifdef QT_QPA_KEYMAP_DEBUG
+#include <QDebug>
+#endif
+
+QT_BEGIN_NAMESPACE
+
+QEmulatorKeyboardManager::QEmulatorKeyboardManager(const QString &argKey, const QString &argSpec, QObject *parent)
+    : QObject(parent)
+{
+    Q_UNUSED(argKey);
+
+    QStringList specList = argSpec.split(QLatin1Char(':'));
+    QStringList deviceList;
+
+    foreach (const QString &temp, specList) {
+        if (temp.startsWith(QLatin1String("/dev/"))) {
+            // if device is specified try to use it
+            deviceList.append(temp);
+            specList.removeAll(temp);
+        }
+    }
+
+    // build new specification without /dev/ elements
+    m_spec = specList.join(QLatin1Char(':'));
+
+    // add all keyboards for devices specified in the argument list
+    foreach (const QString &temp, deviceList)
+        addKeyboard(temp);
+
+}
+
+QEmulatorKeyboardManager::~QEmulatorKeyboardManager()
+{
+    qDeleteAll(m_keyboards);
+    m_keyboards.clear();
+}
+
+void QEmulatorKeyboardManager::addKeyboard(const QString &deviceNode)
+{
+    keyboardHandler = create(deviceNode, m_spec);
+    if (keyboardHandler)
+        m_keyboards.insert(deviceNode, keyboardHandler);
+    else
+        qWarning("Failed to open keyboard");
+}
+
+void QEmulatorKeyboardManager::removeKeyboard(const QString &deviceNode)
+{
+    if (m_keyboards.contains(deviceNode)) {
+        QEmulatorKeyboardHandler *keyboard = m_keyboards.value(deviceNode);
+        m_keyboards.remove(deviceNode);
+        delete keyboard;
+    }
+}
+
+QEmulatorKeyboardHandler *QEmulatorKeyboardManager::create(const QString &argDevice, const QString &argSpec)
+{
+    QString keymapFile;
+    int repeatDelay = 400;
+    int repeatRate = 80;
+    bool disableZap = false;
+    bool enableCompose = false;
+
+    QStringList args = argSpec.split(QLatin1Char(':'));
+    foreach (const QString &arg, args) {
+        if (arg.startsWith(QLatin1String("repeat-rate=")))
+            repeatRate = arg.mid(12).toInt();
+        else if (arg.startsWith(QLatin1String("repeat-delay=")))
+            repeatDelay = arg.mid(13).toInt();
+        else if (arg == QLatin1String("enable-compose"))
+            enableCompose = true;
+        else if (arg == QLatin1String("disable-zap"))
+            disableZap = true;
+        else if (arg.startsWith(QLatin1String("keymap=")))
+            keymapFile = arg.mid(7);
+    }
+
+    int fd;
+    m_fd = qt_safe_open(argDevice.toLocal8Bit().constData(), O_RDONLY | O_NDELAY, 0);
+    if (m_fd >= 0) {
+        if (repeatDelay > 0 && repeatRate > 0) {
+            int kbdrep[2] = { repeatDelay, repeatRate };
+            ::ioctl(m_fd, EVIOCSREP, kbdrep);
+        }
+
+        setObjectName(QLatin1String("LinuxInput Keyboard Handler"));
+
+        QSocketNotifier *keyboardNoti;
+        keyboardNoti = new QSocketNotifier(m_fd, QSocketNotifier::Read, this);
+        const char *signal = SIGNAL(activated(int));
+        const char *slot = SLOT(readKeycode());
+        connect(keyboardNoti, signal, this, slot);
+
+        return new QEmulatorKeyboardHandler();
+    } else {
+        qWarning("Cannot open keyboard input device '%s': %s", qPrintable(argDevice), strerror(errno));
+        return 0;
+    }
+}
+
+void QEmulatorKeyboardManager::readKeycode()
+{
+    struct ::input_event ie_buffer[32];
+    int num = 0;
+
+    forever {
+        int result = qt_safe_read(m_fd, reinterpret_cast<char *>(ie_buffer) + num, sizeof(ie_buffer) - num);
+
+        if (result == 0) {
+            qWarning("Got EOF from the input device.");
+            return;
+        } else if (result < 0) {
+            if (errno != EINTR && errno != EAGAIN) {
+                qWarning("Could not read from input device: %s", strerror(errno));
+                return;
+            }
+        } else {
+            num += result;
+            if (num % sizeof(ie_buffer[0]) == 0)
+                break;
+        }
+    }
+
+    num /= sizeof(ie_buffer[0]);
+
+    for (int i = 0; i < num; ++i) {
+        if (ie_buffer[i].type != EV_KEY)
+            continue;
+
+        quint16 code = ie_buffer[i].code;
+        qint32 value = ie_buffer[i].value;
+
+        keyboardHandler->processKeycode(code, value != 0, value == 2);
+    }
+}
+
+QT_END_NAMESPACE
diff --git a/src/plugins/platforms/minimalegl/qemulatorkeyboardmanager.h b/src/plugins/platforms/minimalegl/qemulatorkeyboardmanager.h
new file mode 100644
index 0000000000..184eb476c1
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/qemulatorkeyboardmanager.h
@@ -0,0 +1,61 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QEMULATORKEYBOARDMANAGER_P_H
+#define QEMULATORKEYBOARDMANAGER_P_H
+
+#include "qemulatorkeyboardhandler.h"
+
+
+#include <QtPlatformSupport/private/qdevicediscovery_p.h>
+
+#include <QObject>
+#include <QHash>
+#include <QSocketNotifier>
+
+QT_BEGIN_HEADER
+
+QT_BEGIN_NAMESPACE
+
+class QEmulatorKeyboardManager : public QObject
+{
+    Q_OBJECT
+public:
+    QEmulatorKeyboardManager(const QString &key, const QString &specification, QObject *parent = 0);
+    ~QEmulatorKeyboardManager();
+
+private slots:
+    void addKeyboard(const QString &deviceNode = QString());
+    void removeKeyboard(const QString &deviceNode);
+
+    QEmulatorKeyboardHandler *create(const QString &device, const QString &specification);
+    void readKeycode();
+
+private:
+    QString m_spec;
+    QHash<QString, QEmulatorKeyboardHandler*> m_keyboards;
+
+    QEmulatorKeyboardHandler *keyboardHandler;
+    int m_fd;
+};
+
+QT_END_HEADER
+
+QT_END_NAMESPACE
+
+#endif // QEMULATORKEYBOARDMANAGER_P_H
diff --git a/src/plugins/platforms/minimalegl/qinputdevicescanner.cpp b/src/plugins/platforms/minimalegl/qinputdevicescanner.cpp
new file mode 100644
index 0000000000..8bdcc1778c
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/qinputdevicescanner.cpp
@@ -0,0 +1,139 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qinputdevicescanner.h"
+
+#include <Qt>
+#include <QFile>
+#include <QDebug>
+
+#include <linux/input.h>
+
+#define MAX_INPUT_DEVICES   20
+
+#define BITS_PER_LONG           (sizeof(long) * 8)
+#define NBITS(x)                ((((x)-1)/BITS_PER_LONG)+1)
+#define OFFSET(x)               ((x)%BITS_PER_LONG)
+#define LONG(x)                 ((x)/BITS_PER_LONG)
+#define IS_BIT_SET(bit, array)  ((array[LONG(bit)] >> OFFSET(bit)) & 1)
+
+QInputDeviceScanner::QInputDeviceScanner()
+{
+    setObjectName(QLatin1String("Input Device Scanner"));
+}
+
+QInputDeviceScanner::~QInputDeviceScanner()
+{
+    m_listOfKeyboard.clear();
+    m_listOfMouse.clear();
+    m_listOfMotion.clear();
+}
+
+void QInputDeviceScanner::scan()
+{
+    for (int index = 0; index < MAX_INPUT_DEVICES; index++) {
+        QString devInput = QString("/dev/input");
+        QString devEvent = devInput + "/event" + QString::number(index);
+        QFile fileEvent;
+        fileEvent.setFileName(devEvent);
+
+        if (fileEvent.open(QIODevice::ReadOnly)) {
+            char name[256] = "Unknown";
+            char phys[256] = "";
+
+            if (::ioctl(fileEvent.handle(), EVIOCGNAME(sizeof(name)), name) < 0)
+                qWarning("Cannot get the name of device");
+
+            if (::ioctl(fileEvent.handle(), EVIOCGPHYS(sizeof(phys)), phys) < 0)
+                qWarning("Cannot get the physical location");
+
+            QString deviceName = QString(name);
+            QString devicePhys = QString(phys);
+
+            if (deviceName.contains("LGE RCU")) {
+                qDebug() << QString("Found RCU: ") << devEvent;
+                m_listOfRcu.append(devEvent);
+            } else if (deviceName.contains("M-RCU - Builtin")) {
+                qDebug() << QString("Found Motion: ") << devEvent;
+                m_listOfMotion.append(devEvent);
+            } else if (devicePhys.startsWith("usb-dev")
+                       || devicePhys.startsWith("usb-ehci")
+                       || devicePhys.startsWith("usb-ohci")
+		       || deviceName.contains("keyboard")
+		       || deviceName.contains("Mouse")
+		       || deviceName.contains("Tablet")) {
+                unsigned long evbit[NBITS(EV_MAX + 1)];
+
+                if (::ioctl(fileEvent.handle(), EVIOCGBIT(0, sizeof(evbit)), evbit) >= 0) {
+                    if (IS_BIT_SET(EV_REL, evbit)
+			|| IS_BIT_SET(EV_ABS, evbit)) {
+                        qDebug() << QString("Found Mouse: ") << devEvent;
+                        m_listOfMouse.append(devEvent);
+                    } else if (IS_BIT_SET(EV_KEY, evbit)
+                               && !IS_BIT_SET(EV_REL, evbit)
+                               && !IS_BIT_SET(EV_ABS, evbit)) {
+                        qDebug() << QString("Found Keyboard: ") << devEvent;
+                        m_listOfKeyboard.append(devEvent);
+                    }
+                }
+            }
+            fileEvent.close();
+        }
+    }
+}
+
+int QInputDeviceScanner::getNumOfMouses()
+{
+    return m_listOfMouse.count();
+}
+
+int QInputDeviceScanner::getNumOfKeyboards()
+{
+    return m_listOfKeyboard.count();
+}
+
+int QInputDeviceScanner::getNumOfMotions()
+{
+    return m_listOfMotion.count();
+}
+
+int QInputDeviceScanner::getNumOfRcu()
+{
+    return m_listOfRcu.count();
+}
+
+const QString & QInputDeviceScanner::getMouseName(int idx)
+{
+    return m_listOfMouse.at(idx);
+}
+
+const QString & QInputDeviceScanner::getKeyboardName(int idx)
+{
+    return m_listOfKeyboard.at(idx);
+}
+
+const QString & QInputDeviceScanner::getMotionName(int idx)
+{
+    return m_listOfMotion.at(idx);
+}
+
+const QString & QInputDeviceScanner::getRcuName(int idx)
+{
+    return m_listOfRcu.at(idx);
+}
+
diff --git a/src/plugins/platforms/minimalegl/qinputdevicescanner.h b/src/plugins/platforms/minimalegl/qinputdevicescanner.h
new file mode 100644
index 0000000000..eb054bee38
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/qinputdevicescanner.h
@@ -0,0 +1,51 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QINPUT_DEVICE_SCANNER_H
+#define QINPUT_DEVICE_SCANNER_H
+
+#include <qobject.h>
+#include <Qt>
+
+class QInputDeviceScanner : public QObject
+{
+    Q_OBJECT
+public:
+    QInputDeviceScanner();
+    ~QInputDeviceScanner();
+
+    void scan();
+
+    int getNumOfMouses();
+    int getNumOfKeyboards();
+    int getNumOfMotions();
+    int getNumOfRcu();
+
+    const QString & getMouseName(int idx);
+    const QString & getKeyboardName(int idx);
+    const QString & getMotionName(int idx);
+    const QString & getRcuName(int idx);
+
+private:
+    QList<QString> m_listOfMouse;
+    QList<QString> m_listOfKeyboard;
+    QList<QString> m_listOfMotion;
+    QList<QString> m_listOfRcu;
+};
+
+#endif /* QINPUT_DEVICE_SCANNER_H */
diff --git a/src/plugins/platforms/minimalegl/qlinuxmouse.cpp b/src/plugins/platforms/minimalegl/qlinuxmouse.cpp
new file mode 100644
index 0000000000..2083658cf8
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/qlinuxmouse.cpp
@@ -0,0 +1,277 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qlinuxmouse.h"
+
+#include <Qt>
+#include <QKeyEvent>
+#include <QSocketNotifier>
+#include <QStringList>
+#include <QGuiApplication>
+
+#include <qpa/qwindowsysteminterface.h>
+#include <qplatformdefs.h>
+#include <private/qcore_unix_p.h>
+
+#include <errno.h>
+#include <linux/input.h>
+
+#include <qdebug.h>
+
+//#ifdef HAS_NYX
+#include "InputControl.h"
+#include "NyxInputControl.h" 
+
+extern "C" {
+    InputControl* m_tpInput = NULL;
+    InputControl* getTouchpanel() { return m_tpInput; }
+}
+//#endif
+
+QLinuxMouseHandler::QLinuxMouseHandler(const QString &specifi)
+    : m_buttons(0), m_yoffset(0), m_xoffset(0), m_prevy(0), m_prevx(0), m_y(0), m_x(0), m_notify(0)
+{
+    qDebug() << "QLinuxMouseHandler" << specifi;
+
+    setObjectName(QLatin1String("LinuxInputSubsystem Mouse Handler for Emulator"));
+
+    QString device = QLatin1String("/dev/input/event0");
+    m_compression = true;
+    m_smooth = false;
+    int jitterLimit = 0;
+    struct input_absinfo abs;
+    QFile fileEvent;
+    int maxX, maxY;
+
+    QStringList qslargs = specifi.split(QLatin1Char(':'));
+    QString temparg;
+    for (int i=0; i<qslargs.size(); i++) {
+        temparg = qslargs.at(i);
+        if (temparg.startsWith(QLatin1String("/dev/")))
+            device = temparg;
+        else if (temparg.startsWith("yoffset="))
+            m_yoffset = temparg.mid(8).toInt();
+        else if (temparg.startsWith("xoffset="))
+            m_xoffset = temparg.mid(8).toInt();
+        else if (temparg.startsWith("dejitter="))
+            jitterLimit = temparg.mid(9).toInt();
+        else if (temparg == "nocompress")
+            m_compression = false;
+    }
+    m_jitterLimitSquared = jitterLimit*jitterLimit;
+
+    m_fd = QT_OPEN(device.toLocal8Bit().constData(), O_RDONLY | O_NDELAY, 0);
+    if (m_fd >= 0) {
+        QSize screenSize = QGuiApplication::primaryScreen()->geometry().size();
+        m_scalex = m_scaley = 1.0f;
+        maxY = screenSize.height();
+        maxX = screenSize.width();
+//#ifdef HAS_NYX
+        InputControl* inputcontrol = new NyxInputControl(NYX_DEVICE_TOUCHPANEL, "Main");
+        if(inputcontrol)
+        {
+            fileEvent.setFileName(device);
+            if(fileEvent.open(QIODevice::ReadOnly)) {
+                if(::ioctl(fileEvent.handle(), EVIOCGABS(0), &abs) >= 0)
+                    maxX = abs.maximum;
+                if(::ioctl(fileEvent.handle(), EVIOCGABS(1), &abs) >= 0)
+                    maxY = abs.maximum;
+
+                m_scalex = (float)screenSize.width() / (float)maxX;
+                m_scaley = (float)screenSize.height() /(float) maxY;
+
+                fileEvent.close();
+            }
+        }
+//#endif
+        m_notify = new QSocketNotifier(m_fd, QSocketNotifier::Read, this);
+        connect(m_notify, SIGNAL(activated(int)), this, SLOT(readMouseData()));
+    } else {
+        qWarning("Cannot open mouse input device '%s': %s", qPrintable(device), strerror(errno));
+        return;
+    }
+}
+
+QLinuxMouseHandler::~QLinuxMouseHandler()
+{
+    if (m_fd >= 0)
+        QT_CLOSE(m_fd);
+}
+
+void QLinuxMouseHandler::sendMouseEvent(int x, int y, Qt::MouseButtons buttons, int MTag)
+{
+    QPoint pos(x+m_xoffset, y+m_yoffset);
+
+    //convert to touch event
+    QList<QWindowSystemInterface::TouchPoint> pointList;
+
+    QWindowSystemInterface::TouchPoint touchPoint;
+    QPoint pt(pos);
+    QRect rc = QGuiApplication::primaryScreen()->virtualGeometry();
+
+    touchPoint.id = 0;
+    touchPoint.normalPosition = QPointF((qreal)pt.x() / (qreal)rc.width(), (qreal)pt.y() / (qreal)rc.height());
+    touchPoint.area = QRectF(pt, QSize(1,1));
+    touchPoint.pressure = 1;
+
+    // determine event type and update state of current touch point
+    QEvent::Type type = QEvent::None;
+    switch (buttons) {
+    case Qt::LeftButton:
+        if (!MTag) {
+            touchPoint.state = Qt::TouchPointMoved;
+            type = QEvent::TouchUpdate;
+        } else {
+            touchPoint.state = Qt::TouchPointPressed;
+            type = QEvent::TouchBegin;
+        }
+        break;
+
+    case Qt::NoButton:
+        touchPoint.state = Qt::TouchPointReleased;
+        type = QEvent::TouchEnd;
+        break;
+
+    default:
+        touchPoint.state = Qt::TouchPointMoved;
+        type = QEvent::TouchUpdate;
+        break;
+    }
+
+    pointList.append(touchPoint);
+
+    QWindowSystemInterface::handleMouseEvent(0, pos, pos, buttons);
+    m_prevx = x;
+    m_prevy = y;
+}
+
+void QLinuxMouseHandler::readMouseData()
+{
+    int iEventCompressCount = 0;
+    bool bPendingMouseEvent = false;
+    bool bPosChanged = false;
+    int num = 0;
+    struct ::input_event ie_buffer[32];
+
+    forever {
+        num = QT_READ(m_fd, reinterpret_cast<char *>(ie_buffer) + num, sizeof(ie_buffer) - num);
+
+        if (num % sizeof(ie_buffer[0]) == 0) {
+            break;
+        } else if (num < 0 && (errno != EINTR && errno != EAGAIN)) {
+            qWarning("Could not read from mouse input device: %s", strerror(errno));
+            m_notify->setEnabled(false);
+            return;
+        } else if (num == 0) {
+            qWarning("Got EOF from the mouse input device.");
+            m_notify->setEnabled(false);
+            return;
+        }
+    }
+
+    num /= sizeof(ie_buffer[0]);
+    QSize screenSize = QGuiApplication::primaryScreen()->geometry().size();
+
+    for (int i = 0; i < num; ++i) {
+        struct ::input_event *ie_data = &ie_buffer[i];
+        bool unknown = false;
+        if (ie_data->type == EV_ABS) {
+            if (ie_data->code == ABS_X && m_x != ie_data->value) {
+                m_x = (int)(ie_data->value * m_scalex);
+                bPosChanged = true;
+            } else if (ie_data->code == ABS_Y && m_y != ie_data->value) {
+                m_y = (int)(ie_data->value * m_scaley);
+                bPosChanged = true;
+            } else if (ie_data->code == ABS_PRESSURE) {
+                //ignore for now...
+            } else if (ie_data->code == ABS_TOOL_WIDTH) {
+                //ignore for now...
+            } else if (ie_data->code == ABS_HAT0X) {
+                //ignore for now...
+            } else if (ie_data->code == ABS_HAT0Y) {
+                //ignore for now...
+            } else {
+                unknown = true;
+            }
+        } else if (ie_data->type == EV_REL) {
+            if (ie_data->code == REL_X) {
+                m_x += ie_data->value;
+                bPosChanged = true;
+            } else if (ie_data->code == REL_Y) {
+                m_y += ie_data->value;
+                bPosChanged = true;
+            }
+            else if (ie_data->code == REL_WHEEL) {
+                int delta = 120 * ie_data->value;
+                QWindowSystemInterface::handleWheelEvent(0,
+                                                         QPoint(m_x, m_y),
+                                                         QPoint(m_x, m_y),
+                                                         delta, Qt::Vertical);
+            }
+        } else if (ie_data->type == EV_KEY && ie_data->code == BTN_TOUCH) {
+            m_buttons = ie_data->value ? Qt::LeftButton : Qt::NoButton;
+
+            sendMouseEvent(m_x, m_y, m_buttons, 1);
+            bPendingMouseEvent = false;
+        } else if (ie_data->type == EV_KEY && ie_data->code >= BTN_LEFT && ie_data->code <= BTN_MIDDLE) {
+            Qt::MouseButton button = Qt::NoButton;
+            switch (ie_data->code) {
+            case BTN_LEFT: button = Qt::LeftButton; break;
+            case BTN_MIDDLE: button = Qt::MidButton; break;
+            case BTN_RIGHT: button = Qt::RightButton; break;
+            }
+            if (ie_data->value)
+                m_buttons |= button;
+            else
+                m_buttons &= ~button;
+            sendMouseEvent(m_x, m_y, m_buttons, 1);
+            bPendingMouseEvent = false;
+        } else if (ie_data->type == EV_SYN && ie_data->code == SYN_REPORT) {
+            if (bPosChanged) {
+                // Saturation of position
+                m_x = qBound(0, m_x, screenSize.width()); 
+                m_y = qBound(0, m_y, screenSize.height()); 
+
+                bPosChanged = false;
+                if (m_compression) {
+                    bPendingMouseEvent = true;
+                    iEventCompressCount++;
+                } else {
+                    sendMouseEvent(m_x, m_y, m_buttons, 0);
+                }
+            }
+        } else if (ie_data->type == EV_MSC && ie_data->code == MSC_SCAN) {
+            // kernel encountered an unmapped key - just ignore it
+            continue;
+        } else {
+            unknown = true;
+        }
+#ifdef QLINUXINPUT_EXTRA_DEBUG
+        if (unknown) {
+            qWarning("unknown mouse event type=%x, code=%x, value=%x", 
+                     ie_data->type, ie_data->code, ie_data->value);
+        }
+#endif
+    }
+    if (m_compression && bPendingMouseEvent) {
+        int distanceSquared = (m_x - m_prevx) * (m_x - m_prevx) + (m_y - m_prevy) * (m_y - m_prevy);
+        if (distanceSquared > m_jitterLimitSquared)
+            sendMouseEvent(m_x, m_y, m_buttons, 0);
+    }
+}
+
diff --git a/src/plugins/platforms/minimalegl/qlinuxmouse.h b/src/plugins/platforms/minimalegl/qlinuxmouse.h
new file mode 100644
index 0000000000..678f19337a
--- /dev/null
+++ b/src/plugins/platforms/minimalegl/qlinuxmouse.h
@@ -0,0 +1,54 @@
+/****************************************************************************
+**
+** Copyright (c) 2015-2018 LG Electronics, Inc.
+** All rights reserved.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QLINUX_MOUSE_H
+#define QLINUX_MOUSE_H
+
+#include <qobject.h>
+#include <Qt>
+
+class QSocketNotifier;
+
+class QLinuxMouseHandlerData;
+
+class QLinuxMouseHandler : public QObject
+{
+    Q_OBJECT
+public:
+    QLinuxMouseHandler(const QString &specification);
+    ~QLinuxMouseHandler();
+
+private slots:
+    void readMouseData();
+
+private:
+    void sendMouseEvent(int x, int y, Qt::MouseButtons buttons, int MTag);
+    QSocketNotifier *          m_notify;
+    int                        m_fd;
+    int                        m_x, m_y;
+    int m_prevx, m_prevy;
+    int m_xoffset, m_yoffset;
+    int m_smoothx, m_smoothy;
+    Qt::MouseButtons           m_buttons;
+    bool m_compression;
+    bool m_smooth;
+    int m_jitterLimitSquared;
+    float m_scalex, m_scaley;
+};
+
+#endif /* QLINUX_MOUSE_H */
diff --git a/src/plugins/platforms/minimalegl/qminimaleglintegration.cpp b/src/plugins/platforms/minimalegl/qminimaleglintegration.cpp
index 5328a8b353..bd1e28a105 100644
--- a/src/plugins/platforms/minimalegl/qminimaleglintegration.cpp
+++ b/src/plugins/platforms/minimalegl/qminimaleglintegration.cpp
@@ -55,6 +55,9 @@
 // this is where EGL headers are pulled in, make sure it is last
 #include "qminimaleglscreen.h"
 
+#include "qinputdevicescanner.h"
+#include "qemulatorkeyboardmanager.h"
+
 QT_BEGIN_NAMESPACE
 
 #ifdef Q_OS_WINRT
@@ -95,6 +98,11 @@ QMinimalEglIntegration::~QMinimalEglIntegration()
     destroyScreen(mScreen);
 }
 
+void QMinimalEglIntegration::initialize()
+{
+    createInputHandlers();
+}
+
 bool QMinimalEglIntegration::hasCapability(QPlatformIntegration::Capability cap) const
 {
     switch (cap) {
@@ -134,6 +142,56 @@ QPlatformFontDatabase *QMinimalEglIntegration::fontDatabase() const
     return mFontDb;
 }
 
+QPlatformNativeInterface *QMinimalEglIntegration::nativeInterface() const
+{
+    //return m_nativeInterface;
+    return const_cast<QMinimalEglIntegration *>(this);
+}
+
+void *QMinimalEglIntegration::nativeResourceForWindow(const QByteArray &resource, QWindow *window)
+{
+    QByteArray lowerCaseResource = resource.toLower();
+
+    if (lowerCaseResource == "egldisplay") {
+        QMinimalEglScreen *screen = static_cast<QMinimalEglScreen *>(window->screen()->handle());
+
+        return screen->display();
+    }
+
+    return 0;
+}
+
+void *QMinimalEglIntegration::nativeResourceForScreen(const QByteArray &resource, QScreen *)
+{
+    return 0;
+}
+
+void QMinimalEglIntegration::createInputHandlers()
+{   
+    QInputDeviceScanner *scanner = new QInputDeviceScanner();
+    scanner->scan();
+    for (int i = 0; i < scanner->getNumOfMouses(); i++) {
+        printf("MouseName: %s\n", scanner->getMouseName(i).toUtf8().data());
+    }
+    for (int i = 0; i < scanner->getNumOfKeyboards(); i++) {
+        printf("KbdName: %s\n", scanner->getKeyboardName(i).toUtf8().data());
+    }
+    for (int i = 0; i < scanner->getNumOfMouses(); i++) {
+        QString mouse = scanner->getMouseName(i);
+        m_mouses.append(new QLinuxMouseHandler(mouse));
+    }
+    /* Use our own QInputDeviceScanner to locate keyboards, if none are found, fall back
+     * to the default QEvdevKeyboardManager methodology in Qt (by sending in a blank string)
+     */
+    QString keyboardDevices = "";
+    for (int k = 0; k < scanner->getNumOfKeyboards(); k++) {
+        keyboardDevices.append(":" + scanner->getKeyboardName(k));
+    }
+    new QEmulatorKeyboardManager(QLatin1String("EvdevKeyboard"), keyboardDevices, this);
+}
+
+
+
 QAbstractEventDispatcher *QMinimalEglIntegration::createEventDispatcher() const
 {
 #if defined(Q_OS_UNIX)
diff --git a/src/plugins/platforms/minimalegl/qminimaleglintegration.h b/src/plugins/platforms/minimalegl/qminimaleglintegration.h
index 8ceeb7b193..bfd19a1853 100644
--- a/src/plugins/platforms/minimalegl/qminimaleglintegration.h
+++ b/src/plugins/platforms/minimalegl/qminimaleglintegration.h
@@ -34,16 +34,24 @@
 #ifndef QMINIMALEGLINTEGRATION_H
 #define QMINIMALEGLINTEGRATION_H
 
+#include "qminimaleglscreen.h"
+
 #include <qpa/qplatformintegration.h>
 #include <qpa/qplatformscreen.h>
+#include <qpa/qplatformwindow.h>
+#include <qpa/qplatformnativeinterface.h>
+
+#include "qlinuxmouse.h"
 
 QT_BEGIN_NAMESPACE
 
-class QMinimalEglIntegration : public QPlatformIntegration
+class QMinimalEglIntegration : public QPlatformIntegration, QPlatformNativeInterface
 {
 public:
     QMinimalEglIntegration();
     ~QMinimalEglIntegration();
+  
+    void initialize();
 
     bool hasCapability(QPlatformIntegration::Capability cap) const Q_DECL_OVERRIDE;
 
@@ -57,9 +65,16 @@ public:
 
     QVariant styleHint(QPlatformIntegration::StyleHint hint) const Q_DECL_OVERRIDE;
 
+    QPlatformNativeInterface *nativeInterface() const;
+    void *nativeResourceForWindow(const QByteArray &resource, QWindow *window);
+    void *nativeResourceForScreen(const QByteArray &resource, QScreen *screen);
+
 private:
+    void createInputHandlers();
+
     QPlatformFontDatabase *mFontDb;
     QPlatformScreen *mScreen;
+    QList<QLinuxMouseHandler *> m_mouses;
 };
 
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/minimalegl/qminimaleglscreen.cpp b/src/plugins/platforms/minimalegl/qminimaleglscreen.cpp
index 59062338cb..59809b61b7 100644
--- a/src/plugins/platforms/minimalegl/qminimaleglscreen.cpp
+++ b/src/plugins/platforms/minimalegl/qminimaleglscreen.cpp
@@ -131,6 +131,7 @@ void QMinimalEglScreen::createAndSetPlatformContext()
     if (!qEnvironmentVariableIsEmpty("QT_QPA_EGLFS_MULTISAMPLE"))
         platformFormat.setSamples(4);
 
+
     EGLConfig config = q_configFromGLFormat(m_dpy, platformFormat);
 
     EGLNativeWindowType eglWindow = 0;
diff --git a/src/plugins/platforms/minimalegl/qminimaleglscreen.h b/src/plugins/platforms/minimalegl/qminimaleglscreen.h
index dacc13a9ba..a5e65f1ef0 100644
--- a/src/plugins/platforms/minimalegl/qminimaleglscreen.h
+++ b/src/plugins/platforms/minimalegl/qminimaleglscreen.h
@@ -37,6 +37,7 @@
 #include <qpa/qplatformscreen.h>
 
 #include <QtCore/QTextStream>
+#include <QtGui/QScreen>
 
 #include <EGL/egl.h>
 
@@ -58,6 +59,8 @@ public:
 
     EGLSurface surface() const { return m_surface; }
 
+    EGLDisplay display() const { return m_dpy; }
+
 private:
     void createAndSetPlatformContext() const;
     void createAndSetPlatformContext();
@@ -68,6 +71,7 @@ private:
     QPlatformOpenGLContext *m_platformContext;
     EGLDisplay m_dpy;
     EGLSurface m_surface;
+
 };
 
 QT_END_NAMESPACE
-- 
2.17.1

